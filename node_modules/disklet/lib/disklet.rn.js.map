{"version":3,"file":"disklet.rn.js","sources":["../src/backends/dummy.ts","../src/helpers/paths.ts","../src/backends/local-storage.ts","../src/backends/memory.ts","../src/backends/react-native.ts","../src/legacy/downgrade.ts","../src/legacy/helpers.ts","../src/legacy/loggedFolder.ts","../src/legacy/unionFolder.ts","../src/helpers/listing.ts","../src/helpers/log.ts","../src/helpers/merge.ts","../src/helpers/navigate.ts","../src/helpers/dump.ts","../src/react-native.ts"],"sourcesContent":["import { Disklet } from '../index'\n\nexport function makeNodeDisklet(path: string): Disklet {\n  throw new Error('makeNodeDisklet is not available on this platform')\n}\n\nexport function makeReactNativeDisklet(): Disklet {\n  throw new Error('makeReactNativeDisklet is not available on this platform')\n}\n","/**\n * Interprets a path as a series of folder lookups,\n * handling special components like `.` and `..`.\n */\nexport function normalizePath(path: string): string {\n  if (/^\\//.test(path)) throw new Error('Absolute paths are not supported')\n  const parts = path.split('/')\n\n  // Shift down good elements, dropping bad ones:\n  let i = 0 // Read index\n  let j = 0 // Write index\n  while (i < parts.length) {\n    const part = parts[i++]\n    if (part === '..') j--\n    else if (part !== '.' && part !== '') parts[j++] = part\n\n    if (j < 0) throw new Error('Path would escape folder')\n  }\n\n  // Array items from 0 to j are the path:\n  return parts.slice(0, j).join('/')\n}\n\n/**\n * Appends a slash if the path isn't blank.\n */\nexport function folderizePath(path: string): string {\n  return path === '' ? path : path + '/'\n}\n","import { base64 } from 'rfc4648'\n\nimport { folderizePath, normalizePath } from '../helpers/paths'\nimport { Disklet, DiskletListing } from '../index'\n\n// The Typescript DOM library isn't available on React Native,\n// so work around that:\nexport interface WebStorage {\n  readonly length: number\n  getItem(key: string): string | null\n  key(index: number): string | null\n  removeItem(key: string): void\n  setItem(key: string, value: string): void\n}\ndeclare const window: { localStorage: WebStorage }\n\n/**\n * Lists the keys in a localStorage object.\n */\nfunction storageKeys(storage: WebStorage): string[] {\n  const out = []\n  for (let i = 0; i < storage.length; ++i) {\n    const key = storage.key(i)\n    if (key != null) out.push(key)\n  }\n  return out\n}\n\n/**\n * Emulates a filesystem in memory.\n */\nexport function makeLocalStorageDisklet(\n  storage: WebStorage = window.localStorage,\n  opts: { prefix?: string } = {}\n): Disklet {\n  const prefix = opts.prefix != null ? folderizePath(opts.prefix) : '/'\n\n  return {\n    delete(path: string): Promise<unknown> {\n      const file = normalizePath(path)\n\n      // Try deleteing as a file:\n      if (storage.getItem(prefix + file) != null) {\n        storage.removeItem(prefix + file)\n      }\n\n      // Try deleting as a folder:\n      const folder = folderizePath(file)\n      for (const key of storageKeys(storage)) {\n        if (key.indexOf(prefix + folder) === 0) storage.removeItem(key)\n      }\n      return Promise.resolve()\n    },\n\n    getData(path: string): Promise<Uint8Array> {\n      return this.getText(path).then(text => base64.parse(text))\n    },\n\n    getText(path: string): Promise<string> {\n      const file = normalizePath(path)\n      const item = storage.getItem(prefix + file)\n      if (item == null) {\n        return Promise.reject(new Error(`Cannot load \"${file}\"`))\n      }\n      return Promise.resolve(item)\n    },\n\n    async list(path: string = ''): Promise<DiskletListing> {\n      const file = normalizePath(path)\n      const out: DiskletListing = {}\n\n      // Try the path as a file:\n      if (storage.getItem(prefix + file) != null) out[file] = 'file'\n\n      // Try the path as a folder:\n      const folder = folderizePath(file)\n      for (const key of storageKeys(storage)) {\n        if (key.indexOf(prefix + folder) !== 0) continue\n\n        const slash = key.indexOf('/', prefix.length + folder.length)\n        if (slash < 0) out[key.slice(prefix.length)] = 'file'\n        else out[key.slice(prefix.length, slash)] = 'folder'\n      }\n\n      return Promise.resolve(out)\n    },\n\n    setData(path: string, data: ArrayLike<number>) {\n      return this.setText(path, base64.stringify(data))\n    },\n\n    setText(path: string, text: string): Promise<unknown> {\n      if (typeof text !== 'string') {\n        return Promise.reject(new TypeError('setText expects a string'))\n      }\n\n      storage.setItem(prefix + normalizePath(path), text)\n      return Promise.resolve()\n    }\n  }\n}\n","import { folderizePath, normalizePath } from '../helpers/paths'\nimport { Disklet, DiskletListing } from '../index'\n\nexport interface MemoryStorage {\n  [key: string]: string | Uint8Array\n}\n\n/**\n * Emulates a filesystem in memory.\n */\nexport function makeMemoryDisklet(storage: MemoryStorage = {}): Disklet {\n  return {\n    delete(path: string): Promise<unknown> {\n      const file = normalizePath(path)\n\n      // Try deleteing as a file:\n      if (storage['/' + file] != null) delete storage['/' + file]\n\n      // Try deleting as a folder:\n      const folder = folderizePath(file)\n      for (const key of Object.keys(storage)) {\n        if (key.indexOf('/' + folder) === 0) delete storage[key]\n      }\n      return Promise.resolve()\n    },\n\n    getData(path: string): Promise<Uint8Array> {\n      const file = normalizePath(path)\n      const item = storage['/' + file]\n      if (item == null) {\n        return Promise.reject(new Error(`Cannot load \"${file}\"`))\n      }\n      if (typeof item === 'string') {\n        return Promise.reject(new Error(`\"${file}\" is a text file.`))\n      }\n      return Promise.resolve(item)\n    },\n\n    getText(path: string): Promise<string> {\n      const file = normalizePath(path)\n      const item = storage['/' + file]\n      if (item == null) {\n        return Promise.reject(new Error(`Cannot load \"${file}\"`))\n      }\n      if (typeof item !== 'string') {\n        return Promise.reject(new Error(`\"${file}\" is a binary file.`))\n      }\n      return Promise.resolve(item)\n    },\n\n    async list(path: string = ''): Promise<DiskletListing> {\n      const file = normalizePath(path)\n      const out: DiskletListing = {}\n\n      // Try the path as a file:\n      if (storage['/' + file] != null) out[file] = 'file'\n\n      // Try the path as a folder:\n      const folder = folderizePath(file)\n      for (const key of Object.keys(storage)) {\n        if (key.indexOf('/' + folder) !== 0) continue\n\n        const slash = key.indexOf('/', 1 + folder.length)\n        if (slash < 0) out[key.slice(1)] = 'file'\n        else out[key.slice(1, slash)] = 'folder'\n      }\n\n      return Promise.resolve(out)\n    },\n\n    setData(path: string, data: ArrayLike<number>) {\n      // We use `any` here becase Flow is too dumb to know that `ArrayLike`\n      // is a perfectly acceptable argument to `Uint8Array.from`:\n      const flowHack: any = data\n      const array = Uint8Array.from(flowHack)\n\n      storage['/' + normalizePath(path)] = array\n      return Promise.resolve()\n    },\n\n    setText(path: string, text: string): Promise<unknown> {\n      if (typeof text !== 'string') {\n        return Promise.reject(new TypeError('setText expects a string'))\n      }\n\n      storage['/' + normalizePath(path)] = text\n      return Promise.resolve()\n    }\n  }\n}\n","import { NativeModules } from 'react-native'\nimport { base64 } from 'rfc4648'\n\nimport { normalizePath } from '../helpers/paths'\nimport { Disklet, DiskletListing } from '../index'\n\nconst native = NativeModules.Disklet\n\n/**\n * Returns a Disklet interface located in the application's data directory.\n */\nexport function makeReactNativeDisklet(): Disklet {\n  return {\n    delete(path: string): Promise<unknown> {\n      return native.delete(normalizePath(path))\n    },\n\n    getData(path: string): Promise<Uint8Array> {\n      return native\n        .getData(normalizePath(path))\n        .then((data: string) => base64.parse(data))\n    },\n\n    getText(path: string): Promise<string> {\n      return native.getText(normalizePath(path))\n    },\n\n    list(path: string = ''): Promise<DiskletListing> {\n      return native.list(normalizePath(path))\n    },\n\n    setData(path: string, data: ArrayLike<number>): Promise<unknown> {\n      return native.setData(normalizePath(path), base64.stringify(data))\n    },\n\n    setText(path: string, text: string): Promise<unknown> {\n      return native.setText(normalizePath(path), text)\n    }\n  }\n}\n","import { Disklet } from '../index'\nimport { DiskletFile, DiskletFolder } from './legacy'\n\nclass File {\n  _disklet: Disklet\n  _path: string\n\n  constructor(disklet: Disklet, path: string) {\n    this._disklet = disklet\n    this._path = path\n  }\n\n  delete(): Promise<unknown> {\n    return this._disklet.delete(this._path)\n  }\n\n  getData(): Promise<Uint8Array> {\n    return this._disklet.getData(this._path)\n  }\n\n  getText(): Promise<string> {\n    return this._disklet.getText(this._path)\n  }\n\n  setData(data: ArrayLike<number>): Promise<unknown> {\n    return this._disklet.setData(this._path, data)\n  }\n\n  setText(text: string): Promise<unknown> {\n    return this._disklet.setText(this._path, text)\n  }\n}\n\nclass Folder {\n  _disklet: Disklet\n  _path: string\n\n  constructor(disklet: Disklet, path: string) {\n    this._disklet = disklet\n    this._path = path\n  }\n\n  delete(): Promise<unknown> {\n    return this._disklet.delete(this._path)\n  }\n\n  file(path: string): DiskletFile {\n    return new File(this._disklet, this._path + '/' + path)\n  }\n\n  folder(path: string): DiskletFolder {\n    return new Folder(this._disklet, this._path + '/' + path)\n  }\n\n  listFiles(): Promise<string[]> {\n    return this._disklet.list(this._path).then(list =>\n      Object.keys(list)\n        .filter(path => list[path] === 'file')\n        .map(path => path.replace(/^.*\\//, ''))\n    )\n  }\n\n  listFolders(): Promise<string[]> {\n    return this._disklet.list(this._path).then(list =>\n      Object.keys(list)\n        .filter(path => list[path] === 'folder')\n        .map(path => path.replace(/^.*\\//, ''))\n    )\n  }\n}\n\nexport function downgradeDisklet(disklet: Disklet): DiskletFolder {\n  return new Folder(disklet, '.')\n}\n","import { DiskletFile, DiskletFolder } from './legacy'\n\n/**\n * Interprets a path as a series of folder lookups,\n * handling special components like `.` and `..`.\n */\nfunction followPath(folder: DiskletFolder, parts: string[]): DiskletFolder {\n  let i = 0 // Read index\n  let j = 0 // Write index\n\n  // Shift down good elements, dropping bad ones:\n  while (i < parts.length) {\n    const part = parts[i++]\n    if (part === '..') j--\n    else if (part !== '.' && part !== '') parts[j++] = part\n\n    if (j < 0) throw new Error('Path would escape folder')\n  }\n\n  // Navigate the folder:\n  for (i = 0; i < j; ++i) {\n    folder = folder.folder(parts[i])\n  }\n  return folder\n}\n\n/**\n * Navigates down to the file indicated by the path.\n */\nexport function locateFile(folder: DiskletFolder, path: string): DiskletFile {\n  const parts = path.split('/')\n  const filename = parts.pop()\n  if (filename == null) throw new Error('Empty path')\n  return followPath(folder, parts).file(filename)\n}\n\n/**\n * Navigates down to the sub-folder indicated by the path.\n */\nexport function locateFolder(\n  folder: DiskletFolder,\n  path: string\n): DiskletFolder {\n  const parts = path.split('/')\n  return followPath(folder, parts)\n}\n\ntype FileIterator<T> = (\n  file: DiskletFile,\n  name: string,\n  parentFolder: DiskletFolder\n) => T | Promise<T>\n\ntype FolderIterator<T> = (\n  folder: DiskletFolder,\n  name: string,\n  parentFolder: DiskletFolder\n) => T | Promise<T>\n\n/**\n * Applies an async function to all the files in a folder.\n */\nexport function mapFiles<T>(\n  folder: DiskletFolder,\n  f: FileIterator<T>\n): Promise<T[]> {\n  return folder\n    .listFiles()\n    .then(names =>\n      Promise.all(names.map(name => f(folder.file(name), name, folder)))\n    )\n}\n\n/**\n * Applies an async function to all the sub-folders in a folder.\n */\nexport function mapFolders<T>(\n  folder: DiskletFolder,\n  f: FolderIterator<T>\n): Promise<T[]> {\n  return folder\n    .listFolders()\n    .then(names =>\n      Promise.all(names.map(name => f(folder.folder(name), name, folder)))\n    )\n}\n\n/**\n * Recursively applies an async function to all the files in a folder tree.\n * The file names are expanded into paths, and the result is a flat array.\n */\nexport function mapAllFiles<T>(\n  folder: DiskletFolder,\n  f: FileIterator<T>\n): Promise<T[]> {\n  function recurse(\n    folder: DiskletFolder,\n    f: FileIterator<T>,\n    prefix: string\n  ): Promise<T[]> {\n    return Promise.all([\n      mapFiles(folder, (file, name) => f(file, prefix + name, folder)),\n      mapFolders(folder, (folder, name) =>\n        recurse(folder, f, prefix + name + '/')\n      )\n    ]).then(([files, folders]) => files.concat(...folders))\n  }\n\n  return recurse(folder, f, '')\n}\n","import { DiskletFile, DiskletFolder } from './legacy'\n\ntype LogOperation =\n  | 'delete file'\n  | 'delete folder'\n  | 'get data'\n  | 'get text'\n  | 'list files'\n  | 'list folders'\n  | 'set data'\n  | 'set text'\n\ninterface LogOptions {\n  callback?: (path: string, operation: LogOperation) => unknown\n  verbose?: boolean\n}\n\nfunction logConsole(path: string, operation: string): void {\n  console.log(`${operation} \"${path}\"`)\n}\n\nfunction log(path: string, operation: LogOperation, opts: LogOptions): void {\n  const { callback = logConsole, verbose = false } = opts\n  if (verbose || /set|delete/.test(operation)) {\n    callback(path, operation)\n  }\n}\n\nclass LoggedFile {\n  _file: DiskletFile\n  _opts: LogOptions\n  _path: string\n\n  constructor(file: DiskletFile, path: string, opts: LogOptions) {\n    this._file = file\n    this._path = path\n    this._opts = opts\n  }\n\n  delete(): Promise<unknown> {\n    log(this._path, 'delete file', this._opts)\n    return this._file.delete()\n  }\n\n  getData(): Promise<Uint8Array> {\n    log(this._path, 'get data', this._opts)\n    return this._file.getData()\n  }\n\n  getText(): Promise<string> {\n    log(this._path, 'get text', this._opts)\n    return this._file.getText()\n  }\n\n  setData(data: ArrayLike<number>): Promise<unknown> {\n    log(this._path, 'set data', this._opts)\n    return this._file.setData(data)\n  }\n\n  setText(text: string): Promise<unknown> {\n    log(this._path, 'set text', this._opts)\n    return this._file.setText(text)\n  }\n\n  getPath(): string {\n    return this._path\n  }\n}\n\nclass LoggedFolder {\n  _folder: DiskletFolder\n  _opts: LogOptions\n  _path: string\n\n  constructor(folder: DiskletFolder, path: string, opts: LogOptions) {\n    this._folder = folder\n    this._path = path\n    this._opts = opts\n  }\n\n  delete(): Promise<unknown> {\n    log(this._path, 'delete folder', this._opts)\n    return this._folder.delete()\n  }\n\n  file(name: string): DiskletFile {\n    return new LoggedFile(\n      this._folder.file(name),\n      this._path + name,\n      this._opts\n    )\n  }\n\n  folder(name: string): DiskletFolder {\n    return new LoggedFolder(\n      this._folder.folder(name),\n      this._path + name + '/',\n      this._opts\n    )\n  }\n\n  listFiles(): Promise<string[]> {\n    log(this._path, 'list files', this._opts)\n    return this._folder.listFiles()\n  }\n\n  listFolders(): Promise<string[]> {\n    log(this._path, 'list folders', this._opts)\n    return this._folder.listFolders()\n  }\n}\n\nexport function makeLoggedFolder(\n  folder: DiskletFolder,\n  opts: LogOptions = {}\n): DiskletFolder {\n  return new LoggedFolder(folder, '', opts)\n}\n","import { mapFiles, mapFolders } from './helpers'\nimport { DiskletFile, DiskletFolder } from './legacy'\n\nfunction removeDuplicates(master: string[], fallback: string[]): string[] {\n  const blacklist: { [name: string]: true } = {}\n  const out: string[] = []\n  master.forEach(item => {\n    if (/\\._x_$/.test(item)) {\n      blacklist[item] = true\n    } else {\n      blacklist[item + '._x_'] = true\n      out.push(item)\n    }\n  })\n\n  fallback.forEach(item => {\n    if (!blacklist[item + '._x_']) out.push(item)\n  })\n\n  return out\n}\n\n/**\n * A file within a unionFolder.\n */\nclass UnionFile {\n  _master: DiskletFile\n  _fallback: DiskletFile\n  _whiteout: DiskletFile\n\n  constructor(\n    master: DiskletFile,\n    fallback: DiskletFile,\n    whiteout: DiskletFile\n  ) {\n    this._master = master\n    this._fallback = fallback\n    this._whiteout = whiteout\n  }\n\n  delete(): Promise<unknown> {\n    return Promise.all([\n      this._whiteout.setData([]),\n      this._master.delete().catch(e => null)\n    ])\n  }\n\n  getData(): Promise<Uint8Array> {\n    return this._master.getData().catch(e =>\n      this._whiteout.getData().then(\n        data => {\n          throw new Error('File has been deleted')\n        },\n        e => this._fallback.getData()\n      )\n    )\n  }\n\n  getText(): Promise<string> {\n    return this._master.getText().catch(e =>\n      this._whiteout.getData().then(\n        data => {\n          throw new Error('File has been deleted')\n        },\n        e => this._fallback.getText()\n      )\n    )\n  }\n\n  setData(data: ArrayLike<number>): Promise<unknown> {\n    return this._master.setData(data)\n  }\n\n  setText(text: string): Promise<unknown> {\n    return this._master.setText(text)\n  }\n\n  getPath(): string {\n    throw new Error('Cannot call getPath on a Union Folder')\n  }\n}\n\n/**\n * Reads and writes go to a master folder, but if a read fails,\n * we will also try the fallback folder.\n */\nexport class UnionFolder {\n  _master: DiskletFolder\n  _fallback: DiskletFolder\n\n  constructor(master: DiskletFolder, fallback: DiskletFolder) {\n    this._master = master\n    this._fallback = fallback\n  }\n\n  delete(): Promise<unknown> {\n    return Promise.all([\n      mapFiles(this, file => file.delete()),\n      mapFolders(this, folder => folder.delete())\n    ]).then(() => undefined)\n  }\n\n  file(name: string): DiskletFile {\n    return new UnionFile(\n      this._master.file(name),\n      this._fallback.file(name),\n      this._master.file(name + '._x_')\n    )\n  }\n\n  folder(name: string): DiskletFolder {\n    return new UnionFolder(\n      this._master.folder(name),\n      this._fallback.folder(name)\n    )\n  }\n\n  listFiles(): Promise<string[]> {\n    return Promise.all([\n      this._master.listFiles(),\n      this._fallback.listFiles()\n    ]).then(values => removeDuplicates(values[0], values[1]))\n  }\n\n  listFolders(): Promise<string[]> {\n    return Promise.all([\n      this._master.listFolders(),\n      this._fallback.listFolders()\n    ]).then(values => removeDuplicates(values[0], values[1]))\n  }\n}\n\nexport function makeUnionFolder(\n  master: DiskletFolder,\n  fallback: DiskletFolder\n): DiskletFolder {\n  return new UnionFolder(master, fallback)\n}\n","import { Disklet, DiskletListing } from '../index'\n\n/**\n * Recursively lists a folder.\n */\nexport function deepList(\n  disklet: Disklet,\n  path?: string\n): Promise<DiskletListing> {\n  return disklet.list(path).then(list =>\n    // Recurse into subfolders:\n    Promise.all(\n      Object.keys(list)\n        .filter(path => list[path] === 'folder')\n        .map(path => deepList(disklet, path))\n    ).then(children => Object.assign(list, ...children))\n  )\n}\n\n/**\n * Filters a listing down to just an array of file paths.\n */\nexport function justFiles(listing: DiskletListing): string[] {\n  return Object.keys(listing).filter(path => listing[path] === 'file')\n}\n\n/**\n * Filters a listing down to just an array of folder paths.\n */\nexport function justFolders(listing: DiskletListing): string[] {\n  return Object.keys(listing).filter(path => listing[path] === 'folder')\n}\n","import { Disklet, DiskletListing } from '../index'\nimport { normalizePath } from './paths'\n\ntype LogOperation =\n  | 'delete'\n  | 'get data'\n  | 'get text'\n  | 'list'\n  | 'set data'\n  | 'set text'\n\ninterface LogOptions {\n  callback?: (path: string, operation: LogOperation) => unknown\n  verbose?: boolean\n}\n\nexport function logDisklet(disklet: Disklet, opts: LogOptions = {}): Disklet {\n  const {\n    callback = (path: string, operation: string) => {\n      console.log(`${operation} \"${path}\"`)\n    },\n    verbose = false\n  } = opts\n\n  const log = (operation: LogOperation, path: string): void => {\n    if (verbose || /set|delete/.test(operation)) {\n      callback(path, operation)\n    }\n  }\n\n  return {\n    delete(path: string): Promise<unknown> {\n      log('delete', normalizePath(path))\n      return disklet.delete(path)\n    },\n\n    getData(path: string): Promise<Uint8Array> {\n      log('get data', normalizePath(path))\n      return disklet.getData(path)\n    },\n\n    getText(path: string): Promise<string> {\n      log('get text', normalizePath(path))\n      return disklet.getText(path)\n    },\n\n    list(path?: string): Promise<DiskletListing> {\n      log('list', path != null ? normalizePath(path) : '')\n      return disklet.list(path)\n    },\n\n    setData(path: string, data: ArrayLike<number>): Promise<unknown> {\n      log('set data', normalizePath(path))\n      return disklet.setData(path, data)\n    },\n\n    setText(path: string, text: string): Promise<unknown> {\n      log('set text', normalizePath(path))\n      return disklet.setText(path, text)\n    }\n  }\n}\n","import { Disklet, DiskletListing } from '../index'\n\nexport function mergeDisklets(master: Disklet, fallback: Disklet): Disklet {\n  return {\n    delete(path: string): Promise<unknown> {\n      return Promise.all([master.delete(path), fallback.delete(path)])\n    },\n\n    getData(path: string): Promise<Uint8Array> {\n      return master.getData(path).catch(e => fallback.getData(path))\n    },\n\n    getText(path: string): Promise<string> {\n      return master.getText(path).catch(e => fallback.getText(path))\n    },\n\n    list(path?: string): Promise<DiskletListing> {\n      return Promise.all([\n        master.list(path),\n        fallback.list(path)\n      ]).then(([masterList, fallbackList]) =>\n        Object.assign(fallbackList, masterList)\n      )\n    },\n\n    setData(path: string, data: ArrayLike<number>): Promise<unknown> {\n      return master.setData(path, data)\n    },\n\n    setText(path: string, text: string): Promise<unknown> {\n      return master.setText(path, text)\n    }\n  }\n}\n","import { Disklet, DiskletListing } from '../index'\nimport { folderizePath, normalizePath } from './paths'\n\nexport function navigateDisklet(disklet: Disklet, path: string): Disklet {\n  const prefix = folderizePath(normalizePath(path))\n\n  return {\n    delete(path: string): Promise<unknown> {\n      return disklet.delete(prefix + path)\n    },\n\n    getData(path: string): Promise<Uint8Array> {\n      return disklet.getData(prefix + path)\n    },\n\n    getText(path: string): Promise<string> {\n      return disklet.getText(prefix + path)\n    },\n\n    list(path: string = '.'): Promise<DiskletListing> {\n      return disklet.list(prefix + path).then(listing => {\n        const out: DiskletListing = {}\n        for (const path in listing) {\n          out[path.replace(prefix, '')] = listing[path]\n        }\n        return out\n      })\n    },\n\n    setData(path: string, data: ArrayLike<number>): Promise<unknown> {\n      return disklet.setData(prefix + path, data)\n    },\n\n    setText(path: string, text: string): Promise<unknown> {\n      return disklet.setText(prefix + path, text)\n    }\n  }\n}\n","import { Disklet, navigateDisklet } from '../index'\n\nexport function dumpData(disklet: Disklet): Promise<any> {\n  const json: any = {}\n  return disklet.list().then(listing => {\n    return Promise.all(\n      Object.keys(listing).map(path => {\n        const type = listing[path]\n        if (type === 'folder') {\n          return dumpData(navigateDisklet(disklet, path)).then(folderData => {\n            json[path] = folderData\n          })\n        }\n        if (type === 'file') {\n          return disklet.getText(path).then(data => {\n            json[path] = JSON.parse(data)\n          })\n        }\n      })\n    ).then(() => json)\n  })\n}\n","import { makeNodeDisklet } from './backends/dummy'\nimport { makeLocalStorageDisklet, WebStorage } from './backends/local-storage'\nimport { makeMemoryDisklet, MemoryStorage } from './backends/memory'\nimport { makeReactNativeDisklet } from './backends/react-native'\nimport { DiskletFolder, downgradeDisklet } from './legacy/legacy'\n\nexport * from './helpers/helpers'\nexport * from './legacy/legacy'\nexport * from './types'\nexport {\n  makeLocalStorageDisklet,\n  makeMemoryDisklet,\n  makeNodeDisklet,\n  makeReactNativeDisklet\n}\n\n// legacy API ----------------------------------------------------------------\n\nexport function makeLocalStorageFolder(\n  storage: WebStorage,\n  opts?: { prefix?: string }\n): DiskletFolder {\n  return downgradeDisklet(makeLocalStorageDisklet(storage, opts))\n}\n\nexport function makeMemoryFolder(storage?: MemoryStorage): DiskletFolder {\n  return downgradeDisklet(makeMemoryDisklet(storage))\n}\n\nexport function makeNodeFolder(path: string): DiskletFolder {\n  return downgradeDisklet(makeNodeDisklet(path))\n}\n\nexport function makeReactNativeFolder(): DiskletFolder {\n  return downgradeDisklet(makeReactNativeDisklet())\n}\n"],"names":["makeNodeDisklet","path","Error","normalizePath","test","parts","split","i","j","length","part","slice","join","folderizePath","storageKeys","storage","out","key","push","makeLocalStorageDisklet","opts","window","localStorage","prefix","file","getItem","removeItem","folder","indexOf","Promise","resolve","getData","getText","then","text","base64","parse","item","reject","list","slash","setData","data","setText","stringify","TypeError","setItem","makeMemoryDisklet","Object","keys","flowHack","array","Uint8Array","from","native","NativeModules","Disklet","makeReactNativeDisklet","File","disklet","_disklet","_path","Folder","listFiles","filter","map","replace","listFolders","downgradeDisklet","followPath","locateFile","filename","pop","locateFolder","mapFiles","f","names","all","name","mapFolders","mapAllFiles","recurse","files","folders","concat","logConsole","operation","console","log","callback","verbose","LoggedFile","_file","_opts","getPath","LoggedFolder","_folder","makeLoggedFolder","removeDuplicates","master","fallback","blacklist","forEach","UnionFile","whiteout","_master","_fallback","_whiteout","e","UnionFolder","undefined","values","makeUnionFolder","deepList","children","justFiles","listing","justFolders","logDisklet","mergeDisklets","masterList","fallbackList","navigateDisklet","dumpData","json","type","folderData","JSON","makeLocalStorageFolder","makeMemoryFolder","makeNodeFolder","makeReactNativeFolder"],"mappings":";;;;;;;;;AAEO,SAASA,eAAT,CAAyBC,IAAzB,EAAgD;AACrD,QAAM,IAAIC,KAAJ,CAAU,mDAAV,CAAN;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJD;;;;AAIO,SAASC,aAAT,CAAuBF,IAAvB,EAA6C;AAClD,MAAI,MAAMG,IAAN,CAAWH,IAAX,CAAJ,EAAsB,MAAM,IAAIC,KAAJ,CAAU,kCAAV,CAAN;AACtB,MAAMG,KAAK,GAAGJ,IAAI,CAACK,KAAL,CAAW,GAAX,CAAd,CAFkD;;AAKlD,MAAIC,CAAC,GAAG,CAAR,CALkD;;AAMlD,MAAIC,CAAC,GAAG,CAAR,CANkD;;AAOlD,SAAOD,CAAC,GAAGF,KAAK,CAACI,MAAjB,EAAyB;AACvB,QAAMC,IAAI,GAAGL,KAAK,CAACE,CAAC,EAAF,CAAlB;AACA,QAAIG,IAAI,KAAK,IAAb,EAAmBF,CAAC,GAApB,KACK,IAAIE,IAAI,KAAK,GAAT,IAAgBA,IAAI,KAAK,EAA7B,EAAiCL,KAAK,CAACG,CAAC,EAAF,CAAL,GAAaE,IAAb;AAEtC,QAAIF,CAAC,GAAG,CAAR,EAAW,MAAM,IAAIN,KAAJ,CAAU,0BAAV,CAAN;AACZ,GAbiD;;;AAgBlD,SAAOG,KAAK,CAACM,KAAN,CAAY,CAAZ,EAAeH,CAAf,EAAkBI,IAAlB,CAAuB,GAAvB,CAAP;AACD;AAED;;;;AAGO,SAASC,aAAT,CAAuBZ,IAAvB,EAA6C;AAClD,SAAOA,IAAI,KAAK,EAAT,GAAcA,IAAd,GAAqBA,IAAI,GAAG,GAAnC;AACD;;ACZD;;;AAGA,SAASa,WAAT,CAAqBC,OAArB,EAAoD;AAClD,MAAMC,GAAG,GAAG,EAAZ;;AACA,OAAK,IAAIT,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGQ,OAAO,CAACN,MAA5B,EAAoC,EAAEF,CAAtC,EAAyC;AACvC,QAAMU,IAAG,GAAGF,OAAO,CAACE,GAAR,CAAYV,CAAZ,CAAZ;;AACA,QAAIU,IAAG,IAAI,IAAX,EAAiBD,GAAG,CAACE,IAAJ,CAASD,IAAT;AAClB;;AACD,SAAOD,GAAP;AACD;AAED;;;;;AAGO,SAASG,uBAAT,CACLJ,OADK,EAELK,IAFK,EAGI;AAAA,MAFTL,OAES;AAFTA,IAAAA,OAES,GAFaM,MAAM,CAACC,YAEpB;AAAA;;AAAA,MADTF,IACS;AADTA,IAAAA,IACS,GADmB,EACnB;AAAA;;AACT,MAAMG,MAAM,GAAGH,IAAI,CAACG,MAAL,IAAe,IAAf,GAAsBV,aAAa,CAACO,IAAI,CAACG,MAAN,CAAnC,GAAmD,GAAlE;AAEA,SAAO;AAAA,+BACEtB,IADF,EACkC;AACrC,UAAMuB,IAAI,GAAGrB,aAAa,CAACF,IAAD,CAA1B,CADqC;;AAIrC,UAAIc,OAAO,CAACU,OAAR,CAAgBF,MAAM,GAAGC,IAAzB,KAAkC,IAAtC,EAA4C;AAC1CT,QAAAA,OAAO,CAACW,UAAR,CAAmBH,MAAM,GAAGC,IAA5B;AACD,OANoC;;;AASrC,UAAMG,MAAM,GAAGd,aAAa,CAACW,IAAD,CAA5B;;AATqC,wCAUnBV,WAAW,CAACC,OAAD,CAVQ,qCAUG;AAAnC,YAAME,KAAG,qBAAT;AACH,YAAIA,KAAG,CAACW,OAAJ,CAAYL,MAAM,GAAGI,MAArB,MAAiC,CAArC,EAAwCZ,OAAO,CAACW,UAAR,CAAmBT,KAAnB;AACzC;;AACD,aAAOY,OAAO,CAACC,OAAR,EAAP;AACD,KAfI;AAiBLC,IAAAA,OAjBK,mBAiBG9B,IAjBH,EAiBsC;AACzC,aAAO,KAAK+B,OAAL,CAAa/B,IAAb,EAAmBgC,IAAnB,CAAwB,UAAAC,IAAI;AAAA,eAAIC,cAAM,CAACC,KAAP,CAAaF,IAAb,CAAJ;AAAA,OAA5B,CAAP;AACD,KAnBI;AAqBLF,IAAAA,OArBK,mBAqBG/B,IArBH,EAqBkC;AACrC,UAAMuB,IAAI,GAAGrB,aAAa,CAACF,IAAD,CAA1B;AACA,UAAMoC,IAAI,GAAGtB,OAAO,CAACU,OAAR,CAAgBF,MAAM,GAAGC,IAAzB,CAAb;;AACA,UAAIa,IAAI,IAAI,IAAZ,EAAkB;AAChB,eAAOR,OAAO,CAACS,MAAR,CAAe,IAAIpC,KAAJ,oBAA0BsB,IAA1B,QAAf,CAAP;AACD;;AACD,aAAOK,OAAO,CAACC,OAAR,CAAgBO,IAAhB,CAAP;AACD,KA5BI;AA8BCE,IAAAA,IA9BD,gBA8BMtC,IA9BN,EA8BkD;AAAA;AAAA,YAA5CA,IAA4C;AAA5CA,UAAAA,IAA4C,GAA7B,EAA6B;AAAA;;AACrD,YAAMuB,IAAI,GAAGrB,aAAa,CAACF,IAAD,CAA1B;AACA,YAAMe,GAAmB,GAAG,EAA5B,CAFqD;;AAKrD,YAAID,OAAO,CAACU,OAAR,CAAgBF,MAAM,GAAGC,IAAzB,KAAkC,IAAtC,EAA4CR,GAAG,CAACQ,IAAD,CAAH,GAAY,MAAZ,CALS;;AAQrD,YAAMG,MAAM,GAAGd,aAAa,CAACW,IAAD,CAA5B;;AARqD,0CASnCV,WAAW,CAACC,OAAD,CATwB,qCASb;AAAnC,cAAME,KAAG,qBAAT;AACH,cAAIA,KAAG,CAACW,OAAJ,CAAYL,MAAM,GAAGI,MAArB,MAAiC,CAArC,EAAwC;;AAExC,cAAMa,KAAK,GAAGvB,KAAG,CAACW,OAAJ,CAAY,GAAZ,EAAiBL,MAAM,CAACd,MAAP,GAAgBkB,MAAM,CAAClB,MAAxC,CAAd;;AACA,cAAI+B,KAAK,GAAG,CAAZ,EAAexB,GAAG,CAACC,KAAG,CAACN,KAAJ,CAAUY,MAAM,CAACd,MAAjB,CAAD,CAAH,GAAgC,MAAhC,CAAf,KACKO,GAAG,CAACC,KAAG,CAACN,KAAJ,CAAUY,MAAM,CAACd,MAAjB,EAAyB+B,KAAzB,CAAD,CAAH,GAAuC,QAAvC;AACN;;AAED,eAAOX,OAAO,CAACC,OAAR,CAAgBd,GAAhB,CAAP;AAjBqD;AAkBtD,KAhDI;AAkDLyB,IAAAA,OAlDK,mBAkDGxC,IAlDH,EAkDiByC,IAlDjB,EAkD0C;AAC7C,aAAO,KAAKC,OAAL,CAAa1C,IAAb,EAAmBkC,cAAM,CAACS,SAAP,CAAiBF,IAAjB,CAAnB,CAAP;AACD,KApDI;AAsDLC,IAAAA,OAtDK,mBAsDG1C,IAtDH,EAsDiBiC,IAtDjB,EAsDiD;AACpD,UAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5B,eAAOL,OAAO,CAACS,MAAR,CAAe,IAAIO,SAAJ,CAAc,0BAAd,CAAf,CAAP;AACD;;AAED9B,MAAAA,OAAO,CAAC+B,OAAR,CAAgBvB,MAAM,GAAGpB,aAAa,CAACF,IAAD,CAAtC,EAA8CiC,IAA9C;AACA,aAAOL,OAAO,CAACC,OAAR,EAAP;AACD;AA7DI,GAAP;AA+DD;;AC7FD;;;AAGO,SAASiB,iBAAT,CAA2BhC,OAA3B,EAAiE;AAAA,MAAtCA,OAAsC;AAAtCA,IAAAA,OAAsC,GAAb,EAAa;AAAA;;AACtE,SAAO;AAAA,+BACEd,IADF,EACkC;AACrC,UAAMuB,IAAI,GAAGrB,aAAa,CAACF,IAAD,CAA1B,CADqC;;AAIrC,UAAIc,OAAO,CAAC,MAAMS,IAAP,CAAP,IAAuB,IAA3B,EAAiC,OAAOT,OAAO,CAAC,MAAMS,IAAP,CAAd,CAJI;;AAOrC,UAAMG,MAAM,GAAGd,aAAa,CAACW,IAAD,CAA5B;;AAPqC,wCAQnBwB,MAAM,CAACC,IAAP,CAAYlC,OAAZ,CARmB,qCAQG;AAAnC,YAAME,IAAG,qBAAT;AACH,YAAIA,IAAG,CAACW,OAAJ,CAAY,MAAMD,MAAlB,MAA8B,CAAlC,EAAqC,OAAOZ,OAAO,CAACE,IAAD,CAAd;AACtC;;AACD,aAAOY,OAAO,CAACC,OAAR,EAAP;AACD,KAbI;AAeLC,IAAAA,OAfK,mBAeG9B,IAfH,EAesC;AACzC,UAAMuB,IAAI,GAAGrB,aAAa,CAACF,IAAD,CAA1B;AACA,UAAMoC,IAAI,GAAGtB,OAAO,CAAC,MAAMS,IAAP,CAApB;;AACA,UAAIa,IAAI,IAAI,IAAZ,EAAkB;AAChB,eAAOR,OAAO,CAACS,MAAR,CAAe,IAAIpC,KAAJ,oBAA0BsB,IAA1B,QAAf,CAAP;AACD;;AACD,UAAI,OAAOa,IAAP,KAAgB,QAApB,EAA8B;AAC5B,eAAOR,OAAO,CAACS,MAAR,CAAe,IAAIpC,KAAJ,QAAcsB,IAAd,wBAAf,CAAP;AACD;;AACD,aAAOK,OAAO,CAACC,OAAR,CAAgBO,IAAhB,CAAP;AACD,KAzBI;AA2BLL,IAAAA,OA3BK,mBA2BG/B,IA3BH,EA2BkC;AACrC,UAAMuB,IAAI,GAAGrB,aAAa,CAACF,IAAD,CAA1B;AACA,UAAMoC,IAAI,GAAGtB,OAAO,CAAC,MAAMS,IAAP,CAApB;;AACA,UAAIa,IAAI,IAAI,IAAZ,EAAkB;AAChB,eAAOR,OAAO,CAACS,MAAR,CAAe,IAAIpC,KAAJ,oBAA0BsB,IAA1B,QAAf,CAAP;AACD;;AACD,UAAI,OAAOa,IAAP,KAAgB,QAApB,EAA8B;AAC5B,eAAOR,OAAO,CAACS,MAAR,CAAe,IAAIpC,KAAJ,QAAcsB,IAAd,0BAAf,CAAP;AACD;;AACD,aAAOK,OAAO,CAACC,OAAR,CAAgBO,IAAhB,CAAP;AACD,KArCI;AAuCCE,IAAAA,IAvCD,gBAuCMtC,IAvCN,EAuCkD;AAAA;AAAA,YAA5CA,IAA4C;AAA5CA,UAAAA,IAA4C,GAA7B,EAA6B;AAAA;;AACrD,YAAMuB,IAAI,GAAGrB,aAAa,CAACF,IAAD,CAA1B;AACA,YAAMe,GAAmB,GAAG,EAA5B,CAFqD;;AAKrD,YAAID,OAAO,CAAC,MAAMS,IAAP,CAAP,IAAuB,IAA3B,EAAiCR,GAAG,CAACQ,IAAD,CAAH,GAAY,MAAZ,CALoB;;AAQrD,YAAMG,MAAM,GAAGd,aAAa,CAACW,IAAD,CAA5B;;AARqD,0CASnCwB,MAAM,CAACC,IAAP,CAAYlC,OAAZ,CATmC,qCASb;AAAnC,cAAME,KAAG,qBAAT;AACH,cAAIA,KAAG,CAACW,OAAJ,CAAY,MAAMD,MAAlB,MAA8B,CAAlC,EAAqC;;AAErC,cAAMa,KAAK,GAAGvB,KAAG,CAACW,OAAJ,CAAY,GAAZ,EAAiB,IAAID,MAAM,CAAClB,MAA5B,CAAd;;AACA,cAAI+B,KAAK,GAAG,CAAZ,EAAexB,GAAG,CAACC,KAAG,CAACN,KAAJ,CAAU,CAAV,CAAD,CAAH,GAAoB,MAApB,CAAf,KACKK,GAAG,CAACC,KAAG,CAACN,KAAJ,CAAU,CAAV,EAAa6B,KAAb,CAAD,CAAH,GAA2B,QAA3B;AACN;;AAED,eAAOX,OAAO,CAACC,OAAR,CAAgBd,GAAhB,CAAP;AAjBqD;AAkBtD,KAzDI;AA2DLyB,IAAAA,OA3DK,mBA2DGxC,IA3DH,EA2DiByC,IA3DjB,EA2D0C;AAC7C;AACA;AACA,UAAMQ,QAAa,GAAGR,IAAtB;AACA,UAAMS,KAAK,GAAGC,UAAU,CAACC,IAAX,CAAgBH,QAAhB,CAAd;AAEAnC,MAAAA,OAAO,CAAC,MAAMZ,aAAa,CAACF,IAAD,CAApB,CAAP,GAAqCkD,KAArC;AACA,aAAOtB,OAAO,CAACC,OAAR,EAAP;AACD,KAnEI;AAqELa,IAAAA,OArEK,mBAqEG1C,IArEH,EAqEiBiC,IArEjB,EAqEiD;AACpD,UAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5B,eAAOL,OAAO,CAACS,MAAR,CAAe,IAAIO,SAAJ,CAAc,0BAAd,CAAf,CAAP;AACD;;AAED9B,MAAAA,OAAO,CAAC,MAAMZ,aAAa,CAACF,IAAD,CAApB,CAAP,GAAqCiC,IAArC;AACA,aAAOL,OAAO,CAACC,OAAR,EAAP;AACD;AA5EI,GAAP;AA8ED;;ACnFD,IAAMwB,OAAM,GAAGC,yBAAa,CAACC,OAA7B;AAEA;;;;AAGO,SAASC,sBAAT,GAA2C;AAChD,SAAO;AAAA,+BACExD,IADF,EACkC;AACrC,aAAOqD,OAAM,UAAN,CAAcnD,aAAa,CAACF,IAAD,CAA3B,CAAP;AACD,KAHI;AAKL8B,IAAAA,OALK,mBAKG9B,IALH,EAKsC;AACzC,aAAOqD,OAAM,CACVvB,OADI,CACI5B,aAAa,CAACF,IAAD,CADjB,EAEJgC,IAFI,CAEC,UAACS,IAAD;AAAA,eAAkBP,cAAM,CAACC,KAAP,CAAaM,IAAb,CAAlB;AAAA,OAFD,CAAP;AAGD,KATI;AAWLV,IAAAA,OAXK,mBAWG/B,IAXH,EAWkC;AACrC,aAAOqD,OAAM,CAACtB,OAAP,CAAe7B,aAAa,CAACF,IAAD,CAA5B,CAAP;AACD,KAbI;AAeLsC,IAAAA,IAfK,gBAeAtC,IAfA,EAe4C;AAAA,UAA5CA,IAA4C;AAA5CA,QAAAA,IAA4C,GAA7B,EAA6B;AAAA;;AAC/C,aAAOqD,OAAM,CAACf,IAAP,CAAYpC,aAAa,CAACF,IAAD,CAAzB,CAAP;AACD,KAjBI;AAmBLwC,IAAAA,OAnBK,mBAmBGxC,IAnBH,EAmBiByC,IAnBjB,EAmB4D;AAC/D,aAAOY,OAAM,CAACb,OAAP,CAAetC,aAAa,CAACF,IAAD,CAA5B,EAAoCkC,cAAM,CAACS,SAAP,CAAiBF,IAAjB,CAApC,CAAP;AACD,KArBI;AAuBLC,IAAAA,OAvBK,mBAuBG1C,IAvBH,EAuBiBiC,IAvBjB,EAuBiD;AACpD,aAAOoB,OAAM,CAACX,OAAP,CAAexC,aAAa,CAACF,IAAD,CAA5B,EAAoCiC,IAApC,CAAP;AACD;AAzBI,GAAP;AA2BD;;ICpCKwB;AAIJ,gBAAYC,OAAZ,EAA8B1D,IAA9B,EAA4C;AAC1C,SAAK2D,QAAL,GAAgBD,OAAhB;AACA,SAAKE,KAAL,GAAa5D,IAAb;AACD;;;;qBAED,mBAA2B;AACzB,WAAO,KAAK2D,QAAL,WAAqB,KAAKC,KAA1B,CAAP;AACD;;SAED9B,UAAA,mBAA+B;AAC7B,WAAO,KAAK6B,QAAL,CAAc7B,OAAd,CAAsB,KAAK8B,KAA3B,CAAP;AACD;;SAED7B,UAAA,mBAA2B;AACzB,WAAO,KAAK4B,QAAL,CAAc5B,OAAd,CAAsB,KAAK6B,KAA3B,CAAP;AACD;;SAEDpB,UAAA,iBAAQC,IAAR,EAAmD;AACjD,WAAO,KAAKkB,QAAL,CAAcnB,OAAd,CAAsB,KAAKoB,KAA3B,EAAkCnB,IAAlC,CAAP;AACD;;SAEDC,UAAA,iBAAQT,IAAR,EAAwC;AACtC,WAAO,KAAK0B,QAAL,CAAcjB,OAAd,CAAsB,KAAKkB,KAA3B,EAAkC3B,IAAlC,CAAP;AACD;;;;;IAGG4B;AAIJ,kBAAYH,OAAZ,EAA8B1D,IAA9B,EAA4C;AAC1C,SAAK2D,QAAL,GAAgBD,OAAhB;AACA,SAAKE,KAAL,GAAa5D,IAAb;AACD;;;;sBAED,mBAA2B;AACzB,WAAO,KAAK2D,QAAL,WAAqB,KAAKC,KAA1B,CAAP;AACD;;UAEDrC,OAAA,cAAKvB,IAAL,EAAgC;AAC9B,WAAO,IAAIyD,IAAJ,CAAS,KAAKE,QAAd,EAAwB,KAAKC,KAAL,GAAa,GAAb,GAAmB5D,IAA3C,CAAP;AACD;;UAED0B,SAAA,gBAAO1B,IAAP,EAAoC;AAClC,WAAO,IAAI6D,MAAJ,CAAW,KAAKF,QAAhB,EAA0B,KAAKC,KAAL,GAAa,GAAb,GAAmB5D,IAA7C,CAAP;AACD;;UAED8D,YAAA,qBAA+B;AAC7B,WAAO,KAAKH,QAAL,CAAcrB,IAAd,CAAmB,KAAKsB,KAAxB,EAA+B5B,IAA/B,CAAoC,UAAAM,IAAI;AAAA,aAC7CS,MAAM,CAACC,IAAP,CAAYV,IAAZ,EACGyB,MADH,CACU,UAAA/D,IAAI;AAAA,eAAIsC,IAAI,CAACtC,IAAD,CAAJ,KAAe,MAAnB;AAAA,OADd,EAEGgE,GAFH,CAEO,UAAAhE,IAAI;AAAA,eAAIA,IAAI,CAACiE,OAAL,CAAa,OAAb,EAAsB,EAAtB,CAAJ;AAAA,OAFX,CAD6C;AAAA,KAAxC,CAAP;AAKD;;UAEDC,cAAA,uBAAiC;AAC/B,WAAO,KAAKP,QAAL,CAAcrB,IAAd,CAAmB,KAAKsB,KAAxB,EAA+B5B,IAA/B,CAAoC,UAAAM,IAAI;AAAA,aAC7CS,MAAM,CAACC,IAAP,CAAYV,IAAZ,EACGyB,MADH,CACU,UAAA/D,IAAI;AAAA,eAAIsC,IAAI,CAACtC,IAAD,CAAJ,KAAe,QAAnB;AAAA,OADd,EAEGgE,GAFH,CAEO,UAAAhE,IAAI;AAAA,eAAIA,IAAI,CAACiE,OAAL,CAAa,OAAb,EAAsB,EAAtB,CAAJ;AAAA,OAFX,CAD6C;AAAA,KAAxC,CAAP;AAKD;;;;;AAGI,SAASE,gBAAT,CAA0BT,OAA1B,EAA2D;AAChE,SAAO,IAAIG,MAAJ,CAAWH,OAAX,EAAoB,GAApB,CAAP;AACD;;ACvED;;;;AAIA,SAASU,UAAT,CAAoB1C,MAApB,EAA2CtB,KAA3C,EAA2E;AACzE,MAAIE,CAAC,GAAG,CAAR,CADyE;;AAEzE,MAAIC,CAAC,GAAG,CAAR,CAFyE;AAIzE;;AACA,SAAOD,CAAC,GAAGF,KAAK,CAACI,MAAjB,EAAyB;AACvB,QAAMC,IAAI,GAAGL,KAAK,CAACE,CAAC,EAAF,CAAlB;AACA,QAAIG,IAAI,KAAK,IAAb,EAAmBF,CAAC,GAApB,KACK,IAAIE,IAAI,KAAK,GAAT,IAAgBA,IAAI,KAAK,EAA7B,EAAiCL,KAAK,CAACG,CAAC,EAAF,CAAL,GAAaE,IAAb;AAEtC,QAAIF,CAAC,GAAG,CAAR,EAAW,MAAM,IAAIN,KAAJ,CAAU,0BAAV,CAAN;AACZ,GAXwE;;;AAczE,OAAKK,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGC,CAAhB,EAAmB,EAAED,CAArB,EAAwB;AACtBoB,IAAAA,MAAM,GAAGA,MAAM,CAACA,MAAP,CAActB,KAAK,CAACE,CAAD,CAAnB,CAAT;AACD;;AACD,SAAOoB,MAAP;AACD;AAED;;;;;AAGO,SAAS2C,UAAT,CAAoB3C,MAApB,EAA2C1B,IAA3C,EAAsE;AAC3E,MAAMI,KAAK,GAAGJ,IAAI,CAACK,KAAL,CAAW,GAAX,CAAd;AACA,MAAMiE,QAAQ,GAAGlE,KAAK,CAACmE,GAAN,EAAjB;AACA,MAAID,QAAQ,IAAI,IAAhB,EAAsB,MAAM,IAAIrE,KAAJ,CAAU,YAAV,CAAN;AACtB,SAAOmE,UAAU,CAAC1C,MAAD,EAAStB,KAAT,CAAV,CAA0BmB,IAA1B,CAA+B+C,QAA/B,CAAP;AACD;AAED;;;;AAGO,SAASE,YAAT,CACL9C,MADK,EAEL1B,IAFK,EAGU;AACf,MAAMI,KAAK,GAAGJ,IAAI,CAACK,KAAL,CAAW,GAAX,CAAd;AACA,SAAO+D,UAAU,CAAC1C,MAAD,EAAStB,KAAT,CAAjB;AACD;;AAcD;;;AAGO,SAASqE,QAAT,CACL/C,MADK,EAELgD,CAFK,EAGS;AACd,SAAOhD,MAAM,CACVoC,SADI,GAEJ9B,IAFI,CAEC,UAAA2C,KAAK;AAAA,WACT/C,OAAO,CAACgD,GAAR,CAAYD,KAAK,CAACX,GAAN,CAAU,UAAAa,IAAI;AAAA,aAAIH,CAAC,CAAChD,MAAM,CAACH,IAAP,CAAYsD,IAAZ,CAAD,EAAoBA,IAApB,EAA0BnD,MAA1B,CAAL;AAAA,KAAd,CAAZ,CADS;AAAA,GAFN,CAAP;AAKD;AAED;;;;AAGO,SAASoD,UAAT,CACLpD,MADK,EAELgD,CAFK,EAGS;AACd,SAAOhD,MAAM,CACVwC,WADI,GAEJlC,IAFI,CAEC,UAAA2C,KAAK;AAAA,WACT/C,OAAO,CAACgD,GAAR,CAAYD,KAAK,CAACX,GAAN,CAAU,UAAAa,IAAI;AAAA,aAAIH,CAAC,CAAChD,MAAM,CAACA,MAAP,CAAcmD,IAAd,CAAD,EAAsBA,IAAtB,EAA4BnD,MAA5B,CAAL;AAAA,KAAd,CAAZ,CADS;AAAA,GAFN,CAAP;AAKD;AAED;;;;;AAIO,SAASqD,WAAT,CACLrD,MADK,EAELgD,CAFK,EAGS;AACd,WAASM,OAAT,CACEtD,MADF,EAEEgD,CAFF,EAGEpD,MAHF,EAIgB;AACd,WAAOM,OAAO,CAACgD,GAAR,CAAY,CACjBH,QAAQ,CAAC/C,MAAD,EAAS,UAACH,IAAD,EAAOsD,IAAP;AAAA,aAAgBH,CAAC,CAACnD,IAAD,EAAOD,MAAM,GAAGuD,IAAhB,EAAsBnD,MAAtB,CAAjB;AAAA,KAAT,CADS,EAEjBoD,UAAU,CAACpD,MAAD,EAAS,UAACA,MAAD,EAASmD,IAAT;AAAA,aACjBG,OAAO,CAACtD,MAAD,EAASgD,CAAT,EAAYpD,MAAM,GAAGuD,IAAT,GAAgB,GAA5B,CADU;AAAA,KAAT,CAFO,CAAZ,EAKJ7C,IALI,CAKC;AAAA,UAAEiD,KAAF;AAAA,UAASC,OAAT;AAAA,aAAsBD,KAAK,CAACE,MAAN,OAAAF,KAAK,EAAWC,OAAX,CAA3B;AAAA,KALD,CAAP;AAMD;;AAED,SAAOF,OAAO,CAACtD,MAAD,EAASgD,CAAT,EAAY,EAAZ,CAAd;AACD;;AC5FD,SAASU,UAAT,CAAoBpF,IAApB,EAAkCqF,SAAlC,EAA2D;AACzDC,EAAAA,OAAO,CAACC,GAAR,CAAeF,SAAf,WAA6BrF,IAA7B;AACD;;AAED,SAASuF,GAAT,CAAavF,IAAb,EAA2BqF,SAA3B,EAAoDlE,IAApD,EAA4E;AAAA,uBACvBA,IADuB,CAClEqE,QADkE;AAAA,MAClEA,QADkE,+BACvDJ,UADuD;AAAA,sBACvBjE,IADuB,CAC3CsE,OAD2C;AAAA,MAC3CA,OAD2C,8BACjC,KADiC;;AAE1E,MAAIA,OAAO,IAAI,aAAatF,IAAb,CAAkBkF,SAAlB,CAAf,EAA6C;AAC3CG,IAAAA,QAAQ,CAACxF,IAAD,EAAOqF,SAAP,CAAR;AACD;AACF;;IAEKK;AAKJ,sBAAYnE,IAAZ,EAA+BvB,IAA/B,EAA6CmB,IAA7C,EAA+D;AAC7D,SAAKwE,KAAL,GAAapE,IAAb;AACA,SAAKqC,KAAL,GAAa5D,IAAb;AACA,SAAK4F,KAAL,GAAazE,IAAb;AACD;;;;qBAED,mBAA2B;AACzBoE,IAAAA,GAAG,CAAC,KAAK3B,KAAN,EAAa,aAAb,EAA4B,KAAKgC,KAAjC,CAAH;AACA,WAAO,KAAKD,KAAL,YAAP;AACD;;SAED7D,UAAA,mBAA+B;AAC7ByD,IAAAA,GAAG,CAAC,KAAK3B,KAAN,EAAa,UAAb,EAAyB,KAAKgC,KAA9B,CAAH;AACA,WAAO,KAAKD,KAAL,CAAW7D,OAAX,EAAP;AACD;;SAEDC,UAAA,mBAA2B;AACzBwD,IAAAA,GAAG,CAAC,KAAK3B,KAAN,EAAa,UAAb,EAAyB,KAAKgC,KAA9B,CAAH;AACA,WAAO,KAAKD,KAAL,CAAW5D,OAAX,EAAP;AACD;;SAEDS,UAAA,iBAAQC,IAAR,EAAmD;AACjD8C,IAAAA,GAAG,CAAC,KAAK3B,KAAN,EAAa,UAAb,EAAyB,KAAKgC,KAA9B,CAAH;AACA,WAAO,KAAKD,KAAL,CAAWnD,OAAX,CAAmBC,IAAnB,CAAP;AACD;;SAEDC,UAAA,iBAAQT,IAAR,EAAwC;AACtCsD,IAAAA,GAAG,CAAC,KAAK3B,KAAN,EAAa,UAAb,EAAyB,KAAKgC,KAA9B,CAAH;AACA,WAAO,KAAKD,KAAL,CAAWjD,OAAX,CAAmBT,IAAnB,CAAP;AACD;;SAED4D,UAAA,mBAAkB;AAChB,WAAO,KAAKjC,KAAZ;AACD;;;;;IAGGkC;AAKJ,wBAAYpE,MAAZ,EAAmC1B,IAAnC,EAAiDmB,IAAjD,EAAmE;AACjE,SAAK4E,OAAL,GAAerE,MAAf;AACA,SAAKkC,KAAL,GAAa5D,IAAb;AACA,SAAK4F,KAAL,GAAazE,IAAb;AACD;;;;sBAED,mBAA2B;AACzBoE,IAAAA,GAAG,CAAC,KAAK3B,KAAN,EAAa,eAAb,EAA8B,KAAKgC,KAAnC,CAAH;AACA,WAAO,KAAKG,OAAL,YAAP;AACD;;UAEDxE,OAAA,cAAKsD,IAAL,EAAgC;AAC9B,WAAO,IAAIa,UAAJ,CACL,KAAKK,OAAL,CAAaxE,IAAb,CAAkBsD,IAAlB,CADK,EAEL,KAAKjB,KAAL,GAAaiB,IAFR,EAGL,KAAKe,KAHA,CAAP;AAKD;;UAEDlE,SAAA,gBAAOmD,IAAP,EAAoC;AAClC,WAAO,IAAIiB,YAAJ,CACL,KAAKC,OAAL,CAAarE,MAAb,CAAoBmD,IAApB,CADK,EAEL,KAAKjB,KAAL,GAAaiB,IAAb,GAAoB,GAFf,EAGL,KAAKe,KAHA,CAAP;AAKD;;UAED9B,YAAA,qBAA+B;AAC7ByB,IAAAA,GAAG,CAAC,KAAK3B,KAAN,EAAa,YAAb,EAA2B,KAAKgC,KAAhC,CAAH;AACA,WAAO,KAAKG,OAAL,CAAajC,SAAb,EAAP;AACD;;UAEDI,cAAA,uBAAiC;AAC/BqB,IAAAA,GAAG,CAAC,KAAK3B,KAAN,EAAa,cAAb,EAA6B,KAAKgC,KAAlC,CAAH;AACA,WAAO,KAAKG,OAAL,CAAa7B,WAAb,EAAP;AACD;;;;;AAGI,SAAS8B,gBAAT,CACLtE,MADK,EAELP,IAFK,EAGU;AAAA,MADfA,IACe;AADfA,IAAAA,IACe,GADI,EACJ;AAAA;;AACf,SAAO,IAAI2E,YAAJ,CAAiBpE,MAAjB,EAAyB,EAAzB,EAA6BP,IAA7B,CAAP;AACD;;AClHD,SAAS8E,gBAAT,CAA0BC,MAA1B,EAA4CC,QAA5C,EAA0E;AACxE,MAAMC,SAAmC,GAAG,EAA5C;AACA,MAAMrF,GAAa,GAAG,EAAtB;AACAmF,EAAAA,MAAM,CAACG,OAAP,CAAe,UAAAjE,IAAI,EAAI;AACrB,QAAI,SAASjC,IAAT,CAAciC,IAAd,CAAJ,EAAyB;AACvBgE,MAAAA,SAAS,CAAChE,IAAD,CAAT,GAAkB,IAAlB;AACD,KAFD,MAEO;AACLgE,MAAAA,SAAS,CAAChE,IAAI,GAAG,MAAR,CAAT,GAA2B,IAA3B;AACArB,MAAAA,GAAG,CAACE,IAAJ,CAASmB,IAAT;AACD;AACF,GAPD;AASA+D,EAAAA,QAAQ,CAACE,OAAT,CAAiB,UAAAjE,IAAI,EAAI;AACvB,QAAI,CAACgE,SAAS,CAAChE,IAAI,GAAG,MAAR,CAAd,EAA+BrB,GAAG,CAACE,IAAJ,CAASmB,IAAT;AAChC,GAFD;AAIA,SAAOrB,GAAP;AACD;AAED;;;;;IAGMuF;AAKJ,qBACEJ,MADF,EAEEC,QAFF,EAGEI,QAHF,EAIE;AACA,SAAKC,OAAL,GAAeN,MAAf;AACA,SAAKO,SAAL,GAAiBN,QAAjB;AACA,SAAKO,SAAL,GAAiBH,QAAjB;AACD;;;;qBAED,mBAA2B;AACzB,WAAO3E,OAAO,CAACgD,GAAR,CAAY,CACjB,KAAK8B,SAAL,CAAelE,OAAf,CAAuB,EAAvB,CADiB,EAEjB,KAAKgE,OAAL,sBAA4B,UAAAG,CAAC;AAAA,aAAI,IAAJ;AAAA,KAA7B,CAFiB,CAAZ,CAAP;AAID;;SAED7E,UAAA,mBAA+B;AAAA;;AAC7B,WAAO,KAAK0E,OAAL,CAAa1E,OAAb,YAA6B,UAAA6E,CAAC;AAAA,aACnC,KAAI,CAACD,SAAL,CAAe5E,OAAf,GAAyBE,IAAzB,CACE,UAAAS,IAAI,EAAI;AACN,cAAM,IAAIxC,KAAJ,CAAU,uBAAV,CAAN;AACD,OAHH,EAIE,UAAA0G,CAAC;AAAA,eAAI,KAAI,CAACF,SAAL,CAAe3E,OAAf,EAAJ;AAAA,OAJH,CADmC;AAAA,KAA9B,CAAP;AAQD;;SAEDC,UAAA,mBAA2B;AAAA;;AACzB,WAAO,KAAKyE,OAAL,CAAazE,OAAb,YAA6B,UAAA4E,CAAC;AAAA,aACnC,MAAI,CAACD,SAAL,CAAe5E,OAAf,GAAyBE,IAAzB,CACE,UAAAS,IAAI,EAAI;AACN,cAAM,IAAIxC,KAAJ,CAAU,uBAAV,CAAN;AACD,OAHH,EAIE,UAAA0G,CAAC;AAAA,eAAI,MAAI,CAACF,SAAL,CAAe1E,OAAf,EAAJ;AAAA,OAJH,CADmC;AAAA,KAA9B,CAAP;AAQD;;SAEDS,UAAA,iBAAQC,IAAR,EAAmD;AACjD,WAAO,KAAK+D,OAAL,CAAahE,OAAb,CAAqBC,IAArB,CAAP;AACD;;SAEDC,UAAA,iBAAQT,IAAR,EAAwC;AACtC,WAAO,KAAKuE,OAAL,CAAa9D,OAAb,CAAqBT,IAArB,CAAP;AACD;;SAED4D,UAAA,mBAAkB;AAChB,UAAM,IAAI5F,KAAJ,CAAU,uCAAV,CAAN;AACD;;;;AAGH;;;;;;IAIa2G,WAAb;AAIE,uBAAYV,MAAZ,EAAmCC,QAAnC,EAA4D;AAC1D,SAAKK,OAAL,GAAeN,MAAf;AACA,SAAKO,SAAL,GAAiBN,QAAjB;AACD;;AAPH;;AAAA,sBASE,mBAA2B;AACzB,WAAOvE,OAAO,CAACgD,GAAR,CAAY,CACjBH,QAAQ,CAAC,IAAD,EAAO,UAAAlD,IAAI;AAAA,aAAIA,IAAI,UAAJ,EAAJ;AAAA,KAAX,CADS,EAEjBuD,UAAU,CAAC,IAAD,EAAO,UAAApD,MAAM;AAAA,aAAIA,MAAM,UAAN,EAAJ;AAAA,KAAb,CAFO,CAAZ,EAGJM,IAHI,CAGC;AAAA,aAAM6E,SAAN;AAAA,KAHD,CAAP;AAID,GAdH;;AAAA,UAgBEtF,IAhBF,GAgBE,cAAKsD,IAAL,EAAgC;AAC9B,WAAO,IAAIyB,SAAJ,CACL,KAAKE,OAAL,CAAajF,IAAb,CAAkBsD,IAAlB,CADK,EAEL,KAAK4B,SAAL,CAAelF,IAAf,CAAoBsD,IAApB,CAFK,EAGL,KAAK2B,OAAL,CAAajF,IAAb,CAAkBsD,IAAI,GAAG,MAAzB,CAHK,CAAP;AAKD,GAtBH;;AAAA,UAwBEnD,MAxBF,GAwBE,gBAAOmD,IAAP,EAAoC;AAClC,WAAO,IAAI+B,WAAJ,CACL,KAAKJ,OAAL,CAAa9E,MAAb,CAAoBmD,IAApB,CADK,EAEL,KAAK4B,SAAL,CAAe/E,MAAf,CAAsBmD,IAAtB,CAFK,CAAP;AAID,GA7BH;;AAAA,UA+BEf,SA/BF,GA+BE,qBAA+B;AAC7B,WAAOlC,OAAO,CAACgD,GAAR,CAAY,CACjB,KAAK4B,OAAL,CAAa1C,SAAb,EADiB,EAEjB,KAAK2C,SAAL,CAAe3C,SAAf,EAFiB,CAAZ,EAGJ9B,IAHI,CAGC,UAAA8E,MAAM;AAAA,aAAIb,gBAAgB,CAACa,MAAM,CAAC,CAAD,CAAP,EAAYA,MAAM,CAAC,CAAD,CAAlB,CAApB;AAAA,KAHP,CAAP;AAID,GApCH;;AAAA,UAsCE5C,WAtCF,GAsCE,uBAAiC;AAC/B,WAAOtC,OAAO,CAACgD,GAAR,CAAY,CACjB,KAAK4B,OAAL,CAAatC,WAAb,EADiB,EAEjB,KAAKuC,SAAL,CAAevC,WAAf,EAFiB,CAAZ,EAGJlC,IAHI,CAGC,UAAA8E,MAAM;AAAA,aAAIb,gBAAgB,CAACa,MAAM,CAAC,CAAD,CAAP,EAAYA,MAAM,CAAC,CAAD,CAAlB,CAApB;AAAA,KAHP,CAAP;AAID,GA3CH;;AAAA;AAAA;AA8CO,SAASC,eAAT,CACLb,MADK,EAELC,QAFK,EAGU;AACf,SAAO,IAAIS,WAAJ,CAAgBV,MAAhB,EAAwBC,QAAxB,CAAP;AACD;;ACvID;;;AAGO,SAASa,QAAT,CACLtD,OADK,EAEL1D,IAFK,EAGoB;AACzB,SAAO0D,OAAO,CAACpB,IAAR,CAAatC,IAAb,EAAmBgC,IAAnB,CAAwB,UAAAM,IAAI;AAAA;AAEjCV,MAAAA,OAAO,CAACgD,GAAR,CACE7B,MAAM,CAACC,IAAP,CAAYV,IAAZ,EACGyB,MADH,CACU,UAAA/D,IAAI;AAAA,eAAIsC,IAAI,CAACtC,IAAD,CAAJ,KAAe,QAAnB;AAAA,OADd,EAEGgE,GAFH,CAEO,UAAAhE,IAAI;AAAA,eAAIgH,QAAQ,CAACtD,OAAD,EAAU1D,IAAV,CAAZ;AAAA,OAFX,CADF,EAIEgC,IAJF,CAIO,UAAAiF,QAAQ;AAAA,eAAI,wBAAc3E,IAAd,SAAuB2E,QAAvB,EAAJ;AAAA,OAJf;AAFiC;AAAA,GAA5B,CAAP;AAQD;AAED;;;;AAGO,SAASC,SAAT,CAAmBC,OAAnB,EAAsD;AAC3D,SAAOpE,MAAM,CAACC,IAAP,CAAYmE,OAAZ,EAAqBpD,MAArB,CAA4B,UAAA/D,IAAI;AAAA,WAAImH,OAAO,CAACnH,IAAD,CAAP,KAAkB,MAAtB;AAAA,GAAhC,CAAP;AACD;AAED;;;;AAGO,SAASoH,WAAT,CAAqBD,OAArB,EAAwD;AAC7D,SAAOpE,MAAM,CAACC,IAAP,CAAYmE,OAAZ,EAAqBpD,MAArB,CAA4B,UAAA/D,IAAI;AAAA,WAAImH,OAAO,CAACnH,IAAD,CAAP,KAAkB,QAAtB;AAAA,GAAhC,CAAP;AACD;;ACfM,SAASqH,UAAT,CAAoB3D,OAApB,EAAsCvC,IAAtC,EAAsE;AAAA,MAAhCA,IAAgC;AAAhCA,IAAAA,IAAgC,GAAb,EAAa;AAAA;;AAAA,cAMvEA,IANuE;AAAA,6BAEzEqE,QAFyE;AAAA,MAEzEA,QAFyE,+BAE9D,UAACxF,IAAD,EAAeqF,SAAf,EAAqC;AAC9CC,IAAAA,OAAO,CAACC,GAAR,CAAeF,SAAf,WAA6BrF,IAA7B;AACD,GAJwE;AAAA,4BAKzEyF,OALyE;AAAA,MAKzEA,OALyE,8BAK/D,KAL+D;;AAQ3E,MAAMF,GAAG,GAAG,SAANA,GAAM,CAACF,SAAD,EAA0BrF,IAA1B,EAAiD;AAC3D,QAAIyF,OAAO,IAAI,aAAatF,IAAb,CAAkBkF,SAAlB,CAAf,EAA6C;AAC3CG,MAAAA,QAAQ,CAACxF,IAAD,EAAOqF,SAAP,CAAR;AACD;AACF,GAJD;;AAMA,SAAO;AAAA,+BACErF,IADF,EACkC;AACrCuF,MAAAA,GAAG,CAAC,QAAD,EAAWrF,aAAa,CAACF,IAAD,CAAxB,CAAH;AACA,aAAO0D,OAAO,UAAP,CAAe1D,IAAf,CAAP;AACD,KAJI;AAML8B,IAAAA,OANK,mBAMG9B,IANH,EAMsC;AACzCuF,MAAAA,GAAG,CAAC,UAAD,EAAarF,aAAa,CAACF,IAAD,CAA1B,CAAH;AACA,aAAO0D,OAAO,CAAC5B,OAAR,CAAgB9B,IAAhB,CAAP;AACD,KATI;AAWL+B,IAAAA,OAXK,mBAWG/B,IAXH,EAWkC;AACrCuF,MAAAA,GAAG,CAAC,UAAD,EAAarF,aAAa,CAACF,IAAD,CAA1B,CAAH;AACA,aAAO0D,OAAO,CAAC3B,OAAR,CAAgB/B,IAAhB,CAAP;AACD,KAdI;AAgBLsC,IAAAA,IAhBK,gBAgBAtC,IAhBA,EAgBwC;AAC3CuF,MAAAA,GAAG,CAAC,MAAD,EAASvF,IAAI,IAAI,IAAR,GAAeE,aAAa,CAACF,IAAD,CAA5B,GAAqC,EAA9C,CAAH;AACA,aAAO0D,OAAO,CAACpB,IAAR,CAAatC,IAAb,CAAP;AACD,KAnBI;AAqBLwC,IAAAA,OArBK,mBAqBGxC,IArBH,EAqBiByC,IArBjB,EAqB4D;AAC/D8C,MAAAA,GAAG,CAAC,UAAD,EAAarF,aAAa,CAACF,IAAD,CAA1B,CAAH;AACA,aAAO0D,OAAO,CAAClB,OAAR,CAAgBxC,IAAhB,EAAsByC,IAAtB,CAAP;AACD,KAxBI;AA0BLC,IAAAA,OA1BK,mBA0BG1C,IA1BH,EA0BiBiC,IA1BjB,EA0BiD;AACpDsD,MAAAA,GAAG,CAAC,UAAD,EAAarF,aAAa,CAACF,IAAD,CAA1B,CAAH;AACA,aAAO0D,OAAO,CAAChB,OAAR,CAAgB1C,IAAhB,EAAsBiC,IAAtB,CAAP;AACD;AA7BI,GAAP;AA+BD;;AC3DM,SAASqF,aAAT,CAAuBpB,MAAvB,EAAwCC,QAAxC,EAAoE;AACzE,SAAO;AAAA,+BACEnG,IADF,EACkC;AACrC,aAAO4B,OAAO,CAACgD,GAAR,CAAY,CAACsB,MAAM,UAAN,CAAclG,IAAd,CAAD,EAAsBmG,QAAQ,UAAR,CAAgBnG,IAAhB,CAAtB,CAAZ,CAAP;AACD,KAHI;AAKL8B,IAAAA,OALK,mBAKG9B,IALH,EAKsC;AACzC,aAAOkG,MAAM,CAACpE,OAAP,CAAe9B,IAAf,WAA2B,UAAA2G,CAAC;AAAA,eAAIR,QAAQ,CAACrE,OAAT,CAAiB9B,IAAjB,CAAJ;AAAA,OAA5B,CAAP;AACD,KAPI;AASL+B,IAAAA,OATK,mBASG/B,IATH,EASkC;AACrC,aAAOkG,MAAM,CAACnE,OAAP,CAAe/B,IAAf,WAA2B,UAAA2G,CAAC;AAAA,eAAIR,QAAQ,CAACpE,OAAT,CAAiB/B,IAAjB,CAAJ;AAAA,OAA5B,CAAP;AACD,KAXI;AAaLsC,IAAAA,IAbK,gBAaAtC,IAbA,EAawC;AAC3C,aAAO4B,OAAO,CAACgD,GAAR,CAAY,CACjBsB,MAAM,CAAC5D,IAAP,CAAYtC,IAAZ,CADiB,EAEjBmG,QAAQ,CAAC7D,IAAT,CAActC,IAAd,CAFiB,CAAZ,EAGJgC,IAHI,CAGC;AAAA,YAAEuF,UAAF;AAAA,YAAcC,YAAd;AAAA,eACN,SAAcA,YAAd,EAA4BD,UAA5B,CADM;AAAA,OAHD,CAAP;AAMD,KApBI;AAsBL/E,IAAAA,OAtBK,mBAsBGxC,IAtBH,EAsBiByC,IAtBjB,EAsB4D;AAC/D,aAAOyD,MAAM,CAAC1D,OAAP,CAAexC,IAAf,EAAqByC,IAArB,CAAP;AACD,KAxBI;AA0BLC,IAAAA,OA1BK,mBA0BG1C,IA1BH,EA0BiBiC,IA1BjB,EA0BiD;AACpD,aAAOiE,MAAM,CAACxD,OAAP,CAAe1C,IAAf,EAAqBiC,IAArB,CAAP;AACD;AA5BI,GAAP;AA8BD;;AC9BM,SAASwF,eAAT,CAAyB/D,OAAzB,EAA2C1D,IAA3C,EAAkE;AACvE,MAAMsB,MAAM,GAAGV,aAAa,CAACV,aAAa,CAACF,IAAD,CAAd,CAA5B;AAEA,SAAO;AAAA,+BACEA,IADF,EACkC;AACrC,aAAO0D,OAAO,UAAP,CAAepC,MAAM,GAAGtB,IAAxB,CAAP;AACD,KAHI;AAKL8B,IAAAA,OALK,mBAKG9B,IALH,EAKsC;AACzC,aAAO0D,OAAO,CAAC5B,OAAR,CAAgBR,MAAM,GAAGtB,IAAzB,CAAP;AACD,KAPI;AASL+B,IAAAA,OATK,mBASG/B,IATH,EASkC;AACrC,aAAO0D,OAAO,CAAC3B,OAAR,CAAgBT,MAAM,GAAGtB,IAAzB,CAAP;AACD,KAXI;AAaLsC,IAAAA,IAbK,gBAaAtC,IAbA,EAa6C;AAAA,UAA7CA,IAA6C;AAA7CA,QAAAA,IAA6C,GAA9B,GAA8B;AAAA;;AAChD,aAAO0D,OAAO,CAACpB,IAAR,CAAahB,MAAM,GAAGtB,IAAtB,EAA4BgC,IAA5B,CAAiC,UAAAmF,OAAO,EAAI;AACjD,YAAMpG,GAAmB,GAAG,EAA5B;;AACA,aAAK,IAAMf,KAAX,IAAmBmH,OAAnB,EAA4B;AAC1BpG,UAAAA,GAAG,CAACf,KAAI,CAACiE,OAAL,CAAa3C,MAAb,EAAqB,EAArB,CAAD,CAAH,GAAgC6F,OAAO,CAACnH,KAAD,CAAvC;AACD;;AACD,eAAOe,GAAP;AACD,OANM,CAAP;AAOD,KArBI;AAuBLyB,IAAAA,OAvBK,mBAuBGxC,IAvBH,EAuBiByC,IAvBjB,EAuB4D;AAC/D,aAAOiB,OAAO,CAAClB,OAAR,CAAgBlB,MAAM,GAAGtB,IAAzB,EAA+ByC,IAA/B,CAAP;AACD,KAzBI;AA2BLC,IAAAA,OA3BK,mBA2BG1C,IA3BH,EA2BiBiC,IA3BjB,EA2BiD;AACpD,aAAOyB,OAAO,CAAChB,OAAR,CAAgBpB,MAAM,GAAGtB,IAAzB,EAA+BiC,IAA/B,CAAP;AACD;AA7BI,GAAP;AA+BD;;ACnCM,SAASyF,QAAT,CAAkBhE,OAAlB,EAAkD;AACvD,MAAMiE,IAAS,GAAG,EAAlB;AACA,SAAOjE,OAAO,CAACpB,IAAR,GAAeN,IAAf,CAAoB,UAAAmF,OAAO,EAAI;AACpC,WAAOvF,OAAO,CAACgD,GAAR,CACL7B,MAAM,CAACC,IAAP,CAAYmE,OAAZ,EAAqBnD,GAArB,CAAyB,UAAAhE,IAAI,EAAI;AAC/B,UAAM4H,IAAI,GAAGT,OAAO,CAACnH,IAAD,CAApB;;AACA,UAAI4H,IAAI,KAAK,QAAb,EAAuB;AACrB,eAAOF,QAAQ,CAACD,eAAe,CAAC/D,OAAD,EAAU1D,IAAV,CAAhB,CAAR,CAAyCgC,IAAzC,CAA8C,UAAA6F,UAAU,EAAI;AACjEF,UAAAA,IAAI,CAAC3H,IAAD,CAAJ,GAAa6H,UAAb;AACD,SAFM,CAAP;AAGD;;AACD,UAAID,IAAI,KAAK,MAAb,EAAqB;AACnB,eAAOlE,OAAO,CAAC3B,OAAR,CAAgB/B,IAAhB,EAAsBgC,IAAtB,CAA2B,UAAAS,IAAI,EAAI;AACxCkF,UAAAA,IAAI,CAAC3H,IAAD,CAAJ,GAAa8H,IAAI,CAAC3F,KAAL,CAAWM,IAAX,CAAb;AACD,SAFM,CAAP;AAGD;AACF,KAZD,CADK,EAcLT,IAdK,CAcA;AAAA,aAAM2F,IAAN;AAAA,KAdA,CAAP;AAeD,GAhBM,CAAP;AAiBD;;ACHM,SAASI,sBAAT,CACLjH,OADK,EAELK,IAFK,EAGU;AACf,SAAOgD,gBAAgB,CAACjD,uBAAuB,CAACJ,OAAD,EAAUK,IAAV,CAAxB,CAAvB;AACD;AAEM,SAAS6G,gBAAT,CAA0BlH,OAA1B,EAAkE;AACvE,SAAOqD,gBAAgB,CAACrB,iBAAiB,CAAChC,OAAD,CAAlB,CAAvB;AACD;AAEM,SAASmH,cAAT,CAAwBjI,IAAxB,EAAqD;AAC1D,SAAOmE,gBAAgB,CAACpE,eAAe,CAAA,CAAhB,CAAvB;AACD;AAEM,SAASmI,qBAAT,GAAgD;AACrD,SAAO/D,gBAAgB,CAACX,sBAAsB,EAAvB,CAAvB;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;"}