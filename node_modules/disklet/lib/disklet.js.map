{"version":3,"file":"disklet.js","sources":["../src/backends/dummy.ts","../src/helpers/paths.ts","../src/backends/local-storage.ts","../src/backends/memory.ts","../src/backends/node.ts","../src/legacy/downgrade.ts","../src/legacy/helpers.ts","../src/legacy/loggedFolder.ts","../src/legacy/unionFolder.ts","../src/helpers/listing.ts","../src/helpers/log.ts","../src/helpers/merge.ts","../src/helpers/navigate.ts","../src/helpers/dump.ts","../src/index.ts"],"sourcesContent":["import { Disklet } from '../index'\n\nexport function makeNodeDisklet(path: string): Disklet {\n  throw new Error('makeNodeDisklet is not available on this platform')\n}\n\nexport function makeReactNativeDisklet(): Disklet {\n  throw new Error('makeReactNativeDisklet is not available on this platform')\n}\n","/**\n * Interprets a path as a series of folder lookups,\n * handling special components like `.` and `..`.\n */\nexport function normalizePath(path: string): string {\n  if (/^\\//.test(path)) throw new Error('Absolute paths are not supported')\n  const parts = path.split('/')\n\n  // Shift down good elements, dropping bad ones:\n  let i = 0 // Read index\n  let j = 0 // Write index\n  while (i < parts.length) {\n    const part = parts[i++]\n    if (part === '..') j--\n    else if (part !== '.' && part !== '') parts[j++] = part\n\n    if (j < 0) throw new Error('Path would escape folder')\n  }\n\n  // Array items from 0 to j are the path:\n  return parts.slice(0, j).join('/')\n}\n\n/**\n * Appends a slash if the path isn't blank.\n */\nexport function folderizePath(path: string): string {\n  return path === '' ? path : path + '/'\n}\n","import { base64 } from 'rfc4648'\n\nimport { folderizePath, normalizePath } from '../helpers/paths'\nimport { Disklet, DiskletListing } from '../index'\n\n// The Typescript DOM library isn't available on React Native,\n// so work around that:\nexport interface WebStorage {\n  readonly length: number\n  getItem(key: string): string | null\n  key(index: number): string | null\n  removeItem(key: string): void\n  setItem(key: string, value: string): void\n}\ndeclare const window: { localStorage: WebStorage }\n\n/**\n * Lists the keys in a localStorage object.\n */\nfunction storageKeys(storage: WebStorage): string[] {\n  const out = []\n  for (let i = 0; i < storage.length; ++i) {\n    const key = storage.key(i)\n    if (key != null) out.push(key)\n  }\n  return out\n}\n\n/**\n * Emulates a filesystem in memory.\n */\nexport function makeLocalStorageDisklet(\n  storage: WebStorage = window.localStorage,\n  opts: { prefix?: string } = {}\n): Disklet {\n  const prefix = opts.prefix != null ? folderizePath(opts.prefix) : '/'\n\n  return {\n    delete(path: string): Promise<unknown> {\n      const file = normalizePath(path)\n\n      // Try deleteing as a file:\n      if (storage.getItem(prefix + file) != null) {\n        storage.removeItem(prefix + file)\n      }\n\n      // Try deleting as a folder:\n      const folder = folderizePath(file)\n      for (const key of storageKeys(storage)) {\n        if (key.indexOf(prefix + folder) === 0) storage.removeItem(key)\n      }\n      return Promise.resolve()\n    },\n\n    getData(path: string): Promise<Uint8Array> {\n      return this.getText(path).then(text => base64.parse(text))\n    },\n\n    getText(path: string): Promise<string> {\n      const file = normalizePath(path)\n      const item = storage.getItem(prefix + file)\n      if (item == null) {\n        return Promise.reject(new Error(`Cannot load \"${file}\"`))\n      }\n      return Promise.resolve(item)\n    },\n\n    async list(path: string = ''): Promise<DiskletListing> {\n      const file = normalizePath(path)\n      const out: DiskletListing = {}\n\n      // Try the path as a file:\n      if (storage.getItem(prefix + file) != null) out[file] = 'file'\n\n      // Try the path as a folder:\n      const folder = folderizePath(file)\n      for (const key of storageKeys(storage)) {\n        if (key.indexOf(prefix + folder) !== 0) continue\n\n        const slash = key.indexOf('/', prefix.length + folder.length)\n        if (slash < 0) out[key.slice(prefix.length)] = 'file'\n        else out[key.slice(prefix.length, slash)] = 'folder'\n      }\n\n      return Promise.resolve(out)\n    },\n\n    setData(path: string, data: ArrayLike<number>) {\n      return this.setText(path, base64.stringify(data))\n    },\n\n    setText(path: string, text: string): Promise<unknown> {\n      if (typeof text !== 'string') {\n        return Promise.reject(new TypeError('setText expects a string'))\n      }\n\n      storage.setItem(prefix + normalizePath(path), text)\n      return Promise.resolve()\n    }\n  }\n}\n","import { folderizePath, normalizePath } from '../helpers/paths'\nimport { Disklet, DiskletListing } from '../index'\n\nexport interface MemoryStorage {\n  [key: string]: string | Uint8Array\n}\n\n/**\n * Emulates a filesystem in memory.\n */\nexport function makeMemoryDisklet(storage: MemoryStorage = {}): Disklet {\n  return {\n    delete(path: string): Promise<unknown> {\n      const file = normalizePath(path)\n\n      // Try deleteing as a file:\n      if (storage['/' + file] != null) delete storage['/' + file]\n\n      // Try deleting as a folder:\n      const folder = folderizePath(file)\n      for (const key of Object.keys(storage)) {\n        if (key.indexOf('/' + folder) === 0) delete storage[key]\n      }\n      return Promise.resolve()\n    },\n\n    getData(path: string): Promise<Uint8Array> {\n      const file = normalizePath(path)\n      const item = storage['/' + file]\n      if (item == null) {\n        return Promise.reject(new Error(`Cannot load \"${file}\"`))\n      }\n      if (typeof item === 'string') {\n        return Promise.reject(new Error(`\"${file}\" is a text file.`))\n      }\n      return Promise.resolve(item)\n    },\n\n    getText(path: string): Promise<string> {\n      const file = normalizePath(path)\n      const item = storage['/' + file]\n      if (item == null) {\n        return Promise.reject(new Error(`Cannot load \"${file}\"`))\n      }\n      if (typeof item !== 'string') {\n        return Promise.reject(new Error(`\"${file}\" is a binary file.`))\n      }\n      return Promise.resolve(item)\n    },\n\n    async list(path: string = ''): Promise<DiskletListing> {\n      const file = normalizePath(path)\n      const out: DiskletListing = {}\n\n      // Try the path as a file:\n      if (storage['/' + file] != null) out[file] = 'file'\n\n      // Try the path as a folder:\n      const folder = folderizePath(file)\n      for (const key of Object.keys(storage)) {\n        if (key.indexOf('/' + folder) !== 0) continue\n\n        const slash = key.indexOf('/', 1 + folder.length)\n        if (slash < 0) out[key.slice(1)] = 'file'\n        else out[key.slice(1, slash)] = 'folder'\n      }\n\n      return Promise.resolve(out)\n    },\n\n    setData(path: string, data: ArrayLike<number>) {\n      // We use `any` here becase Flow is too dumb to know that `ArrayLike`\n      // is a perfectly acceptable argument to `Uint8Array.from`:\n      const flowHack: any = data\n      const array = Uint8Array.from(flowHack)\n\n      storage['/' + normalizePath(path)] = array\n      return Promise.resolve()\n    },\n\n    setText(path: string, text: string): Promise<unknown> {\n      if (typeof text !== 'string') {\n        return Promise.reject(new TypeError('setText expects a string'))\n      }\n\n      storage['/' + normalizePath(path)] = text\n      return Promise.resolve()\n    }\n  }\n}\n","/* global Buffer */\n\nimport fs from 'fs'\nimport pathUtil from 'path'\n\nimport { folderizePath, normalizePath } from '../helpers/paths'\nimport { Disklet, DiskletListing } from '../index'\n\n// Promise versions of node.js file operations: -----------------------------\n\nfunction mkdir(path: string): Promise<unknown> {\n  return new Promise((resolve, reject) =>\n    fs.mkdir(path, undefined, err =>\n      err != null && err.code !== 'EEXIST' ? reject(err) : resolve()\n    )\n  )\n}\n\nfunction rmdir(path: string): Promise<unknown> {\n  return new Promise((resolve, reject) =>\n    fs.rmdir(path, err => (err != null ? reject(err) : resolve()))\n  )\n}\n\nfunction readdir(path: string): Promise<string[]> {\n  return new Promise((resolve, reject) =>\n    fs.readdir(path, (err, out) => (err != null ? reject(err) : resolve(out)))\n  )\n}\n\nfunction unlink(path: string): Promise<unknown> {\n  return new Promise((resolve, reject) =>\n    fs.unlink(path, err => (err != null ? reject(err) : resolve()))\n  )\n}\n\nclass Queue {\n  private _active: boolean\n\n  callBackList: Array<(onEnd: () => void) => void>\n  onEmpty?: () => void\n\n  constructor() {\n    this.callBackList = []\n    this._active = false\n  }\n\n  next(): void {\n    if (this._active) return\n    const fn = this.callBackList.shift()\n    if (fn == null) {\n      if (this.onEmpty != null) {\n        this.onEmpty()\n        this.onEmpty = undefined\n      }\n      return\n    }\n    this._active = true\n    fn(() => {\n      this._active = false\n      process.nextTick(() => this.next())\n    })\n  }\n}\n\nconst writeFilePathQueue: { [id: string]: Queue } = {}\n\nfunction writeFile(\n  path: string,\n  data: any,\n  opts: fs.WriteFileOptions\n): Promise<unknown> {\n  return new Promise((resolve, reject) => {\n    const currentTask = (onEnd: () => void): void => {\n      fs.writeFile(path, data, opts, err => {\n        onEnd()\n        err != null ? reject(err) : resolve()\n      })\n    }\n    if (writeFilePathQueue[path] == null) {\n      writeFilePathQueue[path] = new Queue()\n      writeFilePathQueue[path].onEmpty = () => {\n        delete writeFilePathQueue[path]\n      }\n    }\n    writeFilePathQueue[path].callBackList.push(currentTask)\n    writeFilePathQueue[path].next()\n  })\n}\n\n// Helpers: -----------------------------------------------------------------\n\n/**\n * Recursively deletes a file or directory.\n */\nfunction deepDelete(path: string): Promise<unknown> {\n  return getType(path).then(type => {\n    if (type === 'file') {\n      return unlink(path)\n    }\n    if (type === 'folder') {\n      return readdir(path)\n        .then(names =>\n          Promise.all(names.map(name => deepDelete(pathUtil.join(path, name))))\n        )\n        .then(() => rmdir(path))\n    }\n  })\n}\n\n/**\n * Recursively creates a directory.\n */\nfunction deepMkdir(path: string): Promise<unknown> {\n  return mkdir(path).catch(err => {\n    if (err.code !== 'ENOENT') throw err\n    return deepMkdir(pathUtil.dirname(path)).then(() => mkdir(path))\n  })\n}\n\n/**\n * Writes a file, creating its directory if needed.\n */\nfunction deepWriteFile(\n  path: string,\n  data: Buffer | string,\n  opts: fs.WriteFileOptions\n): Promise<unknown> {\n  return writeFile(path, data, opts).catch(err => {\n    if (err.code !== 'ENOENT') throw err\n    return deepMkdir(pathUtil.dirname(path)).then(() =>\n      writeFile(path, data, opts)\n    )\n  })\n}\n\n/**\n * Returns a path's type, or '' if anything goes wrong.\n */\nfunction getType(path: string): Promise<'file' | 'folder' | ''> {\n  return new Promise(resolve =>\n    fs.stat(path, (err, out) => {\n      if (err != null) resolve('')\n      else if (out.isFile()) resolve('file')\n      else if (out.isDirectory()) resolve('folder')\n      else resolve('')\n    })\n  )\n}\n\n// --------------------------------------------------------------------------\n\nexport function makeNodeDisklet(path: string): Disklet {\n  const root = pathUtil.resolve(path)\n  function locate(path: string): string {\n    return pathUtil.join(root, normalizePath(path))\n  }\n\n  return {\n    delete(path: string): Promise<unknown> {\n      return deepDelete(locate(path))\n    },\n\n    getData(path: string): Promise<Uint8Array> {\n      return new Promise((resolve, reject) =>\n        fs.readFile(locate(path), {}, (err, out) =>\n          err != null ? reject(err) : resolve(out)\n        )\n      )\n    },\n\n    getText(path: string): Promise<string> {\n      return new Promise((resolve, reject) =>\n        fs.readFile(locate(path), 'utf8', (err, out) =>\n          err != null ? reject(err) : resolve(out)\n        )\n      )\n    },\n\n    list(path: string = ''): Promise<DiskletListing> {\n      const file = normalizePath(path)\n      const nativePath = locate(path)\n\n      return getType(nativePath).then(type => {\n        const out: DiskletListing = {}\n\n        if (type === 'file') {\n          out[file] = 'file'\n          return out\n        }\n        if (type === 'folder') {\n          return readdir(nativePath).then(names =>\n            Promise.all(\n              names.map(name => getType(pathUtil.join(nativePath, name)))\n            ).then(types => {\n              const folder = folderizePath(file)\n              for (let i = 0; i < names.length; ++i) {\n                const type = types[i]\n                if (type !== '') out[folder + names[i]] = type\n              }\n              return out\n            })\n          )\n        }\n        return out\n      })\n    },\n\n    setData(path: string, data: ArrayLike<number>): Promise<unknown> {\n      const flowHack: any = data\n      return deepWriteFile(locate(path), Buffer.from(flowHack), {})\n    },\n\n    setText(path: string, text: string): Promise<unknown> {\n      return deepWriteFile(locate(path), text, 'utf8')\n    }\n  }\n}\n","import { Disklet } from '../index'\nimport { DiskletFile, DiskletFolder } from './legacy'\n\nclass File {\n  _disklet: Disklet\n  _path: string\n\n  constructor(disklet: Disklet, path: string) {\n    this._disklet = disklet\n    this._path = path\n  }\n\n  delete(): Promise<unknown> {\n    return this._disklet.delete(this._path)\n  }\n\n  getData(): Promise<Uint8Array> {\n    return this._disklet.getData(this._path)\n  }\n\n  getText(): Promise<string> {\n    return this._disklet.getText(this._path)\n  }\n\n  setData(data: ArrayLike<number>): Promise<unknown> {\n    return this._disklet.setData(this._path, data)\n  }\n\n  setText(text: string): Promise<unknown> {\n    return this._disklet.setText(this._path, text)\n  }\n}\n\nclass Folder {\n  _disklet: Disklet\n  _path: string\n\n  constructor(disklet: Disklet, path: string) {\n    this._disklet = disklet\n    this._path = path\n  }\n\n  delete(): Promise<unknown> {\n    return this._disklet.delete(this._path)\n  }\n\n  file(path: string): DiskletFile {\n    return new File(this._disklet, this._path + '/' + path)\n  }\n\n  folder(path: string): DiskletFolder {\n    return new Folder(this._disklet, this._path + '/' + path)\n  }\n\n  listFiles(): Promise<string[]> {\n    return this._disklet.list(this._path).then(list =>\n      Object.keys(list)\n        .filter(path => list[path] === 'file')\n        .map(path => path.replace(/^.*\\//, ''))\n    )\n  }\n\n  listFolders(): Promise<string[]> {\n    return this._disklet.list(this._path).then(list =>\n      Object.keys(list)\n        .filter(path => list[path] === 'folder')\n        .map(path => path.replace(/^.*\\//, ''))\n    )\n  }\n}\n\nexport function downgradeDisklet(disklet: Disklet): DiskletFolder {\n  return new Folder(disklet, '.')\n}\n","import { DiskletFile, DiskletFolder } from './legacy'\n\n/**\n * Interprets a path as a series of folder lookups,\n * handling special components like `.` and `..`.\n */\nfunction followPath(folder: DiskletFolder, parts: string[]): DiskletFolder {\n  let i = 0 // Read index\n  let j = 0 // Write index\n\n  // Shift down good elements, dropping bad ones:\n  while (i < parts.length) {\n    const part = parts[i++]\n    if (part === '..') j--\n    else if (part !== '.' && part !== '') parts[j++] = part\n\n    if (j < 0) throw new Error('Path would escape folder')\n  }\n\n  // Navigate the folder:\n  for (i = 0; i < j; ++i) {\n    folder = folder.folder(parts[i])\n  }\n  return folder\n}\n\n/**\n * Navigates down to the file indicated by the path.\n */\nexport function locateFile(folder: DiskletFolder, path: string): DiskletFile {\n  const parts = path.split('/')\n  const filename = parts.pop()\n  if (filename == null) throw new Error('Empty path')\n  return followPath(folder, parts).file(filename)\n}\n\n/**\n * Navigates down to the sub-folder indicated by the path.\n */\nexport function locateFolder(\n  folder: DiskletFolder,\n  path: string\n): DiskletFolder {\n  const parts = path.split('/')\n  return followPath(folder, parts)\n}\n\ntype FileIterator<T> = (\n  file: DiskletFile,\n  name: string,\n  parentFolder: DiskletFolder\n) => T | Promise<T>\n\ntype FolderIterator<T> = (\n  folder: DiskletFolder,\n  name: string,\n  parentFolder: DiskletFolder\n) => T | Promise<T>\n\n/**\n * Applies an async function to all the files in a folder.\n */\nexport function mapFiles<T>(\n  folder: DiskletFolder,\n  f: FileIterator<T>\n): Promise<T[]> {\n  return folder\n    .listFiles()\n    .then(names =>\n      Promise.all(names.map(name => f(folder.file(name), name, folder)))\n    )\n}\n\n/**\n * Applies an async function to all the sub-folders in a folder.\n */\nexport function mapFolders<T>(\n  folder: DiskletFolder,\n  f: FolderIterator<T>\n): Promise<T[]> {\n  return folder\n    .listFolders()\n    .then(names =>\n      Promise.all(names.map(name => f(folder.folder(name), name, folder)))\n    )\n}\n\n/**\n * Recursively applies an async function to all the files in a folder tree.\n * The file names are expanded into paths, and the result is a flat array.\n */\nexport function mapAllFiles<T>(\n  folder: DiskletFolder,\n  f: FileIterator<T>\n): Promise<T[]> {\n  function recurse(\n    folder: DiskletFolder,\n    f: FileIterator<T>,\n    prefix: string\n  ): Promise<T[]> {\n    return Promise.all([\n      mapFiles(folder, (file, name) => f(file, prefix + name, folder)),\n      mapFolders(folder, (folder, name) =>\n        recurse(folder, f, prefix + name + '/')\n      )\n    ]).then(([files, folders]) => files.concat(...folders))\n  }\n\n  return recurse(folder, f, '')\n}\n","import { DiskletFile, DiskletFolder } from './legacy'\n\ntype LogOperation =\n  | 'delete file'\n  | 'delete folder'\n  | 'get data'\n  | 'get text'\n  | 'list files'\n  | 'list folders'\n  | 'set data'\n  | 'set text'\n\ninterface LogOptions {\n  callback?: (path: string, operation: LogOperation) => unknown\n  verbose?: boolean\n}\n\nfunction logConsole(path: string, operation: string): void {\n  console.log(`${operation} \"${path}\"`)\n}\n\nfunction log(path: string, operation: LogOperation, opts: LogOptions): void {\n  const { callback = logConsole, verbose = false } = opts\n  if (verbose || /set|delete/.test(operation)) {\n    callback(path, operation)\n  }\n}\n\nclass LoggedFile {\n  _file: DiskletFile\n  _opts: LogOptions\n  _path: string\n\n  constructor(file: DiskletFile, path: string, opts: LogOptions) {\n    this._file = file\n    this._path = path\n    this._opts = opts\n  }\n\n  delete(): Promise<unknown> {\n    log(this._path, 'delete file', this._opts)\n    return this._file.delete()\n  }\n\n  getData(): Promise<Uint8Array> {\n    log(this._path, 'get data', this._opts)\n    return this._file.getData()\n  }\n\n  getText(): Promise<string> {\n    log(this._path, 'get text', this._opts)\n    return this._file.getText()\n  }\n\n  setData(data: ArrayLike<number>): Promise<unknown> {\n    log(this._path, 'set data', this._opts)\n    return this._file.setData(data)\n  }\n\n  setText(text: string): Promise<unknown> {\n    log(this._path, 'set text', this._opts)\n    return this._file.setText(text)\n  }\n\n  getPath(): string {\n    return this._path\n  }\n}\n\nclass LoggedFolder {\n  _folder: DiskletFolder\n  _opts: LogOptions\n  _path: string\n\n  constructor(folder: DiskletFolder, path: string, opts: LogOptions) {\n    this._folder = folder\n    this._path = path\n    this._opts = opts\n  }\n\n  delete(): Promise<unknown> {\n    log(this._path, 'delete folder', this._opts)\n    return this._folder.delete()\n  }\n\n  file(name: string): DiskletFile {\n    return new LoggedFile(\n      this._folder.file(name),\n      this._path + name,\n      this._opts\n    )\n  }\n\n  folder(name: string): DiskletFolder {\n    return new LoggedFolder(\n      this._folder.folder(name),\n      this._path + name + '/',\n      this._opts\n    )\n  }\n\n  listFiles(): Promise<string[]> {\n    log(this._path, 'list files', this._opts)\n    return this._folder.listFiles()\n  }\n\n  listFolders(): Promise<string[]> {\n    log(this._path, 'list folders', this._opts)\n    return this._folder.listFolders()\n  }\n}\n\nexport function makeLoggedFolder(\n  folder: DiskletFolder,\n  opts: LogOptions = {}\n): DiskletFolder {\n  return new LoggedFolder(folder, '', opts)\n}\n","import { mapFiles, mapFolders } from './helpers'\nimport { DiskletFile, DiskletFolder } from './legacy'\n\nfunction removeDuplicates(master: string[], fallback: string[]): string[] {\n  const blacklist: { [name: string]: true } = {}\n  const out: string[] = []\n  master.forEach(item => {\n    if (/\\._x_$/.test(item)) {\n      blacklist[item] = true\n    } else {\n      blacklist[item + '._x_'] = true\n      out.push(item)\n    }\n  })\n\n  fallback.forEach(item => {\n    if (!blacklist[item + '._x_']) out.push(item)\n  })\n\n  return out\n}\n\n/**\n * A file within a unionFolder.\n */\nclass UnionFile {\n  _master: DiskletFile\n  _fallback: DiskletFile\n  _whiteout: DiskletFile\n\n  constructor(\n    master: DiskletFile,\n    fallback: DiskletFile,\n    whiteout: DiskletFile\n  ) {\n    this._master = master\n    this._fallback = fallback\n    this._whiteout = whiteout\n  }\n\n  delete(): Promise<unknown> {\n    return Promise.all([\n      this._whiteout.setData([]),\n      this._master.delete().catch(e => null)\n    ])\n  }\n\n  getData(): Promise<Uint8Array> {\n    return this._master.getData().catch(e =>\n      this._whiteout.getData().then(\n        data => {\n          throw new Error('File has been deleted')\n        },\n        e => this._fallback.getData()\n      )\n    )\n  }\n\n  getText(): Promise<string> {\n    return this._master.getText().catch(e =>\n      this._whiteout.getData().then(\n        data => {\n          throw new Error('File has been deleted')\n        },\n        e => this._fallback.getText()\n      )\n    )\n  }\n\n  setData(data: ArrayLike<number>): Promise<unknown> {\n    return this._master.setData(data)\n  }\n\n  setText(text: string): Promise<unknown> {\n    return this._master.setText(text)\n  }\n\n  getPath(): string {\n    throw new Error('Cannot call getPath on a Union Folder')\n  }\n}\n\n/**\n * Reads and writes go to a master folder, but if a read fails,\n * we will also try the fallback folder.\n */\nexport class UnionFolder {\n  _master: DiskletFolder\n  _fallback: DiskletFolder\n\n  constructor(master: DiskletFolder, fallback: DiskletFolder) {\n    this._master = master\n    this._fallback = fallback\n  }\n\n  delete(): Promise<unknown> {\n    return Promise.all([\n      mapFiles(this, file => file.delete()),\n      mapFolders(this, folder => folder.delete())\n    ]).then(() => undefined)\n  }\n\n  file(name: string): DiskletFile {\n    return new UnionFile(\n      this._master.file(name),\n      this._fallback.file(name),\n      this._master.file(name + '._x_')\n    )\n  }\n\n  folder(name: string): DiskletFolder {\n    return new UnionFolder(\n      this._master.folder(name),\n      this._fallback.folder(name)\n    )\n  }\n\n  listFiles(): Promise<string[]> {\n    return Promise.all([\n      this._master.listFiles(),\n      this._fallback.listFiles()\n    ]).then(values => removeDuplicates(values[0], values[1]))\n  }\n\n  listFolders(): Promise<string[]> {\n    return Promise.all([\n      this._master.listFolders(),\n      this._fallback.listFolders()\n    ]).then(values => removeDuplicates(values[0], values[1]))\n  }\n}\n\nexport function makeUnionFolder(\n  master: DiskletFolder,\n  fallback: DiskletFolder\n): DiskletFolder {\n  return new UnionFolder(master, fallback)\n}\n","import { Disklet, DiskletListing } from '../index'\n\n/**\n * Recursively lists a folder.\n */\nexport function deepList(\n  disklet: Disklet,\n  path?: string\n): Promise<DiskletListing> {\n  return disklet.list(path).then(list =>\n    // Recurse into subfolders:\n    Promise.all(\n      Object.keys(list)\n        .filter(path => list[path] === 'folder')\n        .map(path => deepList(disklet, path))\n    ).then(children => Object.assign(list, ...children))\n  )\n}\n\n/**\n * Filters a listing down to just an array of file paths.\n */\nexport function justFiles(listing: DiskletListing): string[] {\n  return Object.keys(listing).filter(path => listing[path] === 'file')\n}\n\n/**\n * Filters a listing down to just an array of folder paths.\n */\nexport function justFolders(listing: DiskletListing): string[] {\n  return Object.keys(listing).filter(path => listing[path] === 'folder')\n}\n","import { Disklet, DiskletListing } from '../index'\nimport { normalizePath } from './paths'\n\ntype LogOperation =\n  | 'delete'\n  | 'get data'\n  | 'get text'\n  | 'list'\n  | 'set data'\n  | 'set text'\n\ninterface LogOptions {\n  callback?: (path: string, operation: LogOperation) => unknown\n  verbose?: boolean\n}\n\nexport function logDisklet(disklet: Disklet, opts: LogOptions = {}): Disklet {\n  const {\n    callback = (path: string, operation: string) => {\n      console.log(`${operation} \"${path}\"`)\n    },\n    verbose = false\n  } = opts\n\n  const log = (operation: LogOperation, path: string): void => {\n    if (verbose || /set|delete/.test(operation)) {\n      callback(path, operation)\n    }\n  }\n\n  return {\n    delete(path: string): Promise<unknown> {\n      log('delete', normalizePath(path))\n      return disklet.delete(path)\n    },\n\n    getData(path: string): Promise<Uint8Array> {\n      log('get data', normalizePath(path))\n      return disklet.getData(path)\n    },\n\n    getText(path: string): Promise<string> {\n      log('get text', normalizePath(path))\n      return disklet.getText(path)\n    },\n\n    list(path?: string): Promise<DiskletListing> {\n      log('list', path != null ? normalizePath(path) : '')\n      return disklet.list(path)\n    },\n\n    setData(path: string, data: ArrayLike<number>): Promise<unknown> {\n      log('set data', normalizePath(path))\n      return disklet.setData(path, data)\n    },\n\n    setText(path: string, text: string): Promise<unknown> {\n      log('set text', normalizePath(path))\n      return disklet.setText(path, text)\n    }\n  }\n}\n","import { Disklet, DiskletListing } from '../index'\n\nexport function mergeDisklets(master: Disklet, fallback: Disklet): Disklet {\n  return {\n    delete(path: string): Promise<unknown> {\n      return Promise.all([master.delete(path), fallback.delete(path)])\n    },\n\n    getData(path: string): Promise<Uint8Array> {\n      return master.getData(path).catch(e => fallback.getData(path))\n    },\n\n    getText(path: string): Promise<string> {\n      return master.getText(path).catch(e => fallback.getText(path))\n    },\n\n    list(path?: string): Promise<DiskletListing> {\n      return Promise.all([\n        master.list(path),\n        fallback.list(path)\n      ]).then(([masterList, fallbackList]) =>\n        Object.assign(fallbackList, masterList)\n      )\n    },\n\n    setData(path: string, data: ArrayLike<number>): Promise<unknown> {\n      return master.setData(path, data)\n    },\n\n    setText(path: string, text: string): Promise<unknown> {\n      return master.setText(path, text)\n    }\n  }\n}\n","import { Disklet, DiskletListing } from '../index'\nimport { folderizePath, normalizePath } from './paths'\n\nexport function navigateDisklet(disklet: Disklet, path: string): Disklet {\n  const prefix = folderizePath(normalizePath(path))\n\n  return {\n    delete(path: string): Promise<unknown> {\n      return disklet.delete(prefix + path)\n    },\n\n    getData(path: string): Promise<Uint8Array> {\n      return disklet.getData(prefix + path)\n    },\n\n    getText(path: string): Promise<string> {\n      return disklet.getText(prefix + path)\n    },\n\n    list(path: string = '.'): Promise<DiskletListing> {\n      return disklet.list(prefix + path).then(listing => {\n        const out: DiskletListing = {}\n        for (const path in listing) {\n          out[path.replace(prefix, '')] = listing[path]\n        }\n        return out\n      })\n    },\n\n    setData(path: string, data: ArrayLike<number>): Promise<unknown> {\n      return disklet.setData(prefix + path, data)\n    },\n\n    setText(path: string, text: string): Promise<unknown> {\n      return disklet.setText(prefix + path, text)\n    }\n  }\n}\n","import { Disklet, navigateDisklet } from '../index'\n\nexport function dumpData(disklet: Disklet): Promise<any> {\n  const json: any = {}\n  return disklet.list().then(listing => {\n    return Promise.all(\n      Object.keys(listing).map(path => {\n        const type = listing[path]\n        if (type === 'folder') {\n          return dumpData(navigateDisklet(disklet, path)).then(folderData => {\n            json[path] = folderData\n          })\n        }\n        if (type === 'file') {\n          return disklet.getText(path).then(data => {\n            json[path] = JSON.parse(data)\n          })\n        }\n      })\n    ).then(() => json)\n  })\n}\n","import { makeReactNativeDisklet } from './backends/dummy'\nimport { makeLocalStorageDisklet, WebStorage } from './backends/local-storage'\nimport { makeMemoryDisklet, MemoryStorage } from './backends/memory'\nimport { makeNodeDisklet } from './backends/node'\nimport { DiskletFolder, downgradeDisklet } from './legacy/legacy'\n\nexport * from './helpers/helpers'\nexport * from './legacy/legacy'\nexport * from './types'\nexport {\n  makeLocalStorageDisklet,\n  makeMemoryDisklet,\n  makeNodeDisklet,\n  makeReactNativeDisklet\n}\n\n// legacy API ----------------------------------------------------------------\n\nexport function makeLocalStorageFolder(\n  storage: WebStorage,\n  opts?: { prefix?: string }\n): DiskletFolder {\n  return downgradeDisklet(makeLocalStorageDisklet(storage, opts))\n}\n\nexport function makeMemoryFolder(storage?: MemoryStorage): DiskletFolder {\n  return downgradeDisklet(makeMemoryDisklet(storage))\n}\n\nexport function makeNodeFolder(path: string): DiskletFolder {\n  return downgradeDisklet(makeNodeDisklet(path))\n}\n\nexport function makeReactNativeFolder(): DiskletFolder {\n  return downgradeDisklet(makeReactNativeDisklet())\n}\n"],"names":["makeReactNativeDisklet","Error","normalizePath","path","test","parts","split","i","j","length","part","slice","join","folderizePath","storageKeys","storage","out","key","push","makeLocalStorageDisklet","opts","window","localStorage","prefix","file","getItem","removeItem","folder","indexOf","Promise","resolve","getData","getText","then","text","base64","parse","item","reject","list","slash","setData","data","setText","stringify","TypeError","setItem","makeMemoryDisklet","Object","keys","flowHack","array","Uint8Array","from","mkdir","fs","undefined","err","code","rmdir","readdir","unlink","Queue","callBackList","_active","next","fn","shift","onEmpty","process","nextTick","writeFilePathQueue","writeFile","currentTask","onEnd","deepDelete","getType","type","names","all","map","name","pathUtil","deepMkdir","dirname","deepWriteFile","stat","isFile","isDirectory","makeNodeDisklet","root","locate","readFile","nativePath","types","Buffer","File","disklet","_disklet","_path","Folder","listFiles","filter","replace","listFolders","downgradeDisklet","followPath","locateFile","filename","pop","locateFolder","mapFiles","f","mapFolders","mapAllFiles","recurse","files","folders","concat","logConsole","operation","console","log","callback","verbose","LoggedFile","_file","_opts","getPath","LoggedFolder","_folder","makeLoggedFolder","removeDuplicates","master","fallback","blacklist","forEach","UnionFile","whiteout","_master","_fallback","_whiteout","e","UnionFolder","values","makeUnionFolder","deepList","children","justFiles","listing","justFolders","logDisklet","mergeDisklets","masterList","fallbackList","navigateDisklet","dumpData","json","folderData","JSON","makeLocalStorageFolder","makeMemoryFolder","makeNodeFolder","makeReactNativeFolder"],"mappings":"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"}